var search_data = {"index":{"searchIndex":["mustache","context","contextmiss","generator","parser","syntaxerror","template","utils","string","'scan_tag_!'()","'scan_tag_#'()","'scan_tag_/'()","'scan_tag_<'()","'scan_tag_='()","'scan_tag_>'()","'scan_tag_^'()","[]()","[]()","[]=()","[]=()","add_type()","classify()","classify()","compile()","compile()","compile()","compile!()","compiled?()","compiled?()","const_from_file()","content_tags()","context()","ctag=()","current()","dispatch_based_on_type()","error()","escapehtml()","escapehtml()","ev()","fetch()","find()","find_closing_tag()","find_in_hash()","has_key?()","inheritable_config_for()","mustache_in_stack()","new()","new()","new()","new()","new()","new()","new()","offset()","on_etag()","on_fetch()","on_inverted_section()","on_partial()","on_section()","on_utag()","otag=()","partial()","partial()","partial()","partials()","path()","path()","path=()","pop()","position()","push()","raise_on_context_miss=()","raise_on_context_miss=()","raise_on_context_miss?()","raise_on_context_miss?()","recursor()","regexp()","render()","render()","render()","render_file()","render_file()","rescued_const_get()","scan_tag_()","scan_tag_block()","scan_tag_close()","scan_tag_comment()","scan_tag_delimiter()","scan_tag_inverted()","scan_tag_open_partial()","scan_tag_unescaped()","scan_tags()","scan_text()","scan_until_exclusive()","sections()","str()","tags()","template()","template()","template=()","template=()","template_extension()","template_extension()","template_extension=()","template_extension=()","template_file()","template_file()","template_file=()","template_file=()","template_for_partial()","template_name()","template_name()","template_name=()","template_name=()","template_path()","template_path()","template_path=()","template_path=()","templateify()","templateify()","to_s()","to_s()","tokens()","underscore()","underscore()","valid_types()","view_class()","view_namespace()","view_namespace=()","view_path()","view_path=()"],"longSearchIndex":["mustache","mustache::context","mustache::contextmiss","mustache::generator","mustache::parser","mustache::parser::syntaxerror","mustache::template","mustache::utils","mustache::utils::string","mustache::parser#'scan_tag_!'()","mustache::parser#'scan_tag_#'()","mustache::parser#'scan_tag_/'()","mustache::parser#'scan_tag_<'()","mustache::parser#'scan_tag_='()","mustache::parser#'scan_tag_>'()","mustache::parser#'scan_tag_^'()","mustache#[]()","mustache::context#[]()","mustache#[]=()","mustache::context#[]=()","mustache::parser::add_type()","mustache::classify()","mustache::utils::string#classify()","mustache::generator#compile()","mustache::parser#compile()","mustache::template#compile()","mustache::generator#compile!()","mustache::compiled?()","mustache#compiled?()","mustache::const_from_file()","mustache::parser#content_tags()","mustache#context()","mustache::parser#ctag=()","mustache::context#current()","mustache::parser#dispatch_based_on_type()","mustache::parser#error()","mustache#escapehtml()","mustache::context#escapehtml()","mustache::generator#ev()","mustache::context#fetch()","mustache::context#find()","mustache::parser#find_closing_tag()","mustache::context#find_in_hash()","mustache::context#has_key?()","mustache::inheritable_config_for()","mustache::context#mustache_in_stack()","mustache::new()","mustache::context::new()","mustache::generator::new()","mustache::parser::new()","mustache::parser::syntaxerror::new()","mustache::template::new()","mustache::utils::string::new()","mustache::parser#offset()","mustache::generator#on_etag()","mustache::generator#on_fetch()","mustache::generator#on_inverted_section()","mustache::generator#on_partial()","mustache::generator#on_section()","mustache::generator#on_utag()","mustache::parser#otag=()","mustache#partial()","mustache::partial()","mustache::context#partial()","mustache::template#partials()","mustache#path()","mustache::path()","mustache::path=()","mustache::context#pop()","mustache::parser#position()","mustache::context#push()","mustache::raise_on_context_miss=()","mustache#raise_on_context_miss=()","mustache#raise_on_context_miss?()","mustache::raise_on_context_miss?()","mustache::template::recursor()","mustache::parser#regexp()","mustache#render()","mustache::render()","mustache::template#render()","mustache#render_file()","mustache::render_file()","mustache::rescued_const_get()","mustache::parser#scan_tag_()","mustache::parser#scan_tag_block()","mustache::parser#scan_tag_close()","mustache::parser#scan_tag_comment()","mustache::parser#scan_tag_delimiter()","mustache::parser#scan_tag_inverted()","mustache::parser#scan_tag_open_partial()","mustache::parser#scan_tag_unescaped()","mustache::parser#scan_tags()","mustache::parser#scan_text()","mustache::parser#scan_until_exclusive()","mustache::template#sections()","mustache::generator#str()","mustache::template#tags()","mustache::template()","mustache#template()","mustache::template=()","mustache#template=()","mustache::template_extension()","mustache#template_extension()","mustache::template_extension=()","mustache#template_extension=()","mustache::template_file()","mustache#template_file()","mustache::template_file=()","mustache#template_file=()","mustache::context#template_for_partial()","mustache#template_name()","mustache::template_name()","mustache#template_name=()","mustache::template_name=()","mustache::template_path()","mustache#template_path()","mustache::template_path=()","mustache#template_path=()","mustache::templateify()","mustache#templateify()","mustache::parser::syntaxerror#to_s()","mustache::template#to_s()","mustache::template#tokens()","mustache::underscore()","mustache::utils::string#underscore()","mustache::parser::valid_types()","mustache::view_class()","mustache::view_namespace()","mustache::view_namespace=()","mustache::view_path()","mustache::view_path=()"],"info":[["Mustache","","Mustache.html","","<p>Mustache is the base class from which your Mustache subclasses should\ninherit (though it can be used …\n"],["Mustache::Context","","Mustache/Context.html","","<p>A Context represents the context which a Mustache template is executed\nwithin. All Mustache tags reference …\n"],["Mustache::ContextMiss","","Mustache/ContextMiss.html","","<p>A ContextMiss is raised whenever a tag&#39;s target can not be found in the\ncurrent context if `Mustache#raise_on_context_miss?` …\n"],["Mustache::Generator","","Mustache/Generator.html","","<p>The Generator is in charge of taking an array of Mustache tokens, usually\nassembled by the Parser, and …\n"],["Mustache::Parser","","Mustache/Parser.html","","<p>The Parser is responsible for taking a string template and converting it\ninto an array of tokens and, …\n"],["Mustache::Parser::SyntaxError","","Mustache/Parser/SyntaxError.html","","<p>A SyntaxError is raised when the Parser comes across unclosed tags,\nsections, illegal content in tags, …\n"],["Mustache::Template","","Mustache/Template.html","","<p>A Template represents a Mustache template. It compiles and caches a raw\nstring template into something …\n"],["Mustache::Utils","","Mustache/Utils.html","",""],["Mustache::Utils::String","","Mustache/Utils/String.html","",""],["'scan_tag_!'","Mustache::Parser","Mustache/Parser.html#method-i-27scan_tag_-21-27","(content, fetch, padding, pre_match_position)",""],["'scan_tag_#'","Mustache::Parser","Mustache/Parser.html#method-i-27scan_tag_-23-27","(content, fetch, padding, pre_match_position)",""],["'scan_tag_/'","Mustache::Parser","Mustache/Parser.html#method-i-27scan_tag_-2F-27","(content, fetch, padding, pre_match_position)",""],["'scan_tag_<'","Mustache::Parser","Mustache/Parser.html#method-i-27scan_tag_-3C-27","(content, fetch, padding, pre_match_position)",""],["'scan_tag_='","Mustache::Parser","Mustache/Parser.html#method-i-27scan_tag_-3D-27","(content, fetch, padding, pre_match_position)",""],["'scan_tag_>'","Mustache::Parser","Mustache/Parser.html#method-i-27scan_tag_-3E-27","(content, fetch, padding, pre_match_position)",""],["'scan_tag_^'","Mustache::Parser","Mustache/Parser.html#method-i-27scan_tag_-5E-27","(content, fetch, padding, pre_match_position)",""],["[]","Mustache","Mustache.html#method-i-5B-5D","(key)","<p>Context accessors.\n<p>Example:\n\n<pre>view = Mustache.new\nview[:name] = &quot;Jon&quot;\nview.template = &quot;Hi, {{name}}!&quot;\nview.render ...</pre>\n"],["[]","Mustache::Context","Mustache/Context.html#method-i-5B-5D","(name)","<p>Alias for `fetch`.\n"],["[]=","Mustache","Mustache.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Mustache::Context","Mustache/Context.html#method-i-5B-5D-3D","(name, value)","<p>Can be used to add a value to the context in a hash-like way.\n<p>context = “Chris”\n"],["add_type","Mustache::Parser","Mustache/Parser.html#method-c-add_type","(*types, &block)","<p>Add a supported sigil type (with optional aliases) to the Parser.\n<p>Requires a block, which will be sent …\n"],["classify","Mustache","Mustache.html#method-c-classify","(underscored)","<p>template_partial =&gt; TemplatePartial template/partial =&gt;\nTemplate::Partial\n"],["classify","Mustache::Utils::String","Mustache/Utils/String.html#method-i-classify","()",""],["compile","Mustache::Generator","Mustache/Generator.html#method-i-compile","(exp)","<p>Given an array of tokens, returns an interpolatable Ruby string.\n"],["compile","Mustache::Parser","Mustache/Parser.html#method-i-compile","(template)","<p>Given a string template, returns an array of tokens.\n"],["compile","Mustache::Template","Mustache/Template.html#method-i-compile","(src = @source)","<p>Does the dirty work of transforming a Mustache template into an\ninterpolation-friendly Ruby string.\n"],["compile!","Mustache::Generator","Mustache/Generator.html#method-i-compile-21","(exp)","<p>Given an array of tokens, converts them into Ruby code. In particular there\nare three types of expressions …\n"],["compiled?","Mustache","Mustache.html#method-c-compiled-3F","()","<p>Has this template already been compiled? Compilation is somewhat expensive\nso it may be useful to check …\n"],["compiled?","Mustache","Mustache.html#method-i-compiled-3F","()","<p>Has this instance or its class already compiled a template?\n"],["const_from_file","Mustache","Mustache.html#method-c-const_from_file","(name)",""],["content_tags","Mustache::Parser","Mustache/Parser.html#method-i-content_tags","(type, current_ctag_regex)",""],["context","Mustache","Mustache.html#method-i-context","()","<p>A helper method which gives access to the context at a given time. Kind of\na hack for now, but useful …\n"],["ctag=","Mustache::Parser","Mustache/Parser.html#method-i-ctag-3D","(value)","<p>The closing tag delimiter. This too may be changed at runtime.\n"],["current","Mustache::Context","Mustache/Context.html#method-i-current","()",""],["dispatch_based_on_type","Mustache::Parser","Mustache/Parser.html#method-i-dispatch_based_on_type","(type, content, fetch, padding, pre_match_position)",""],["error","Mustache::Parser","Mustache/Parser.html#method-i-error","(message, pos = position)","<p>Raises a SyntaxError. The message should be the name of the error - other\ndetails such as line number …\n"],["escapeHTML","Mustache","Mustache.html#method-i-escapeHTML","(str)","<p>Override this to provide custom escaping.\n<p>Example:\n\n<pre>class PersonView &lt; Mustache\n  def escapeHTML(str)\n  ...</pre>\n"],["escapeHTML","Mustache::Context","Mustache/Context.html#method-i-escapeHTML","(str)","<p>Allows customization of how Mustache escapes things.\n<p>@param [String] str String to escape.\n<p>@return [String] …\n"],["ev","Mustache::Generator","Mustache/Generator.html#method-i-ev","(s)","<p>An interpolation-friendly version of a string, for use within a Ruby\nstring.\n"],["fetch","Mustache::Context","Mustache/Context.html#method-i-fetch","(name, default = :__raise)","<p>Similar to Hash#fetch, finds a value by `name` in the context&#39;s stack.\nYou may specify the default …\n"],["find","Mustache::Context","Mustache/Context.html#method-i-find","(obj, key, default = nil)","<p>Finds a key in an object, using whatever method is most appropriate. If the\nobject is a hash, does a …\n"],["find_closing_tag","Mustache::Parser","Mustache/Parser.html#method-i-find_closing_tag","(scanner, current_ctag_regex)",""],["find_in_hash","Mustache::Context","Mustache/Context.html#method-i-find_in_hash","(obj, key, default)","<p>Fetches a hash key if it exists, or returns the given default.\n"],["has_key?","Mustache::Context","Mustache/Context.html#method-i-has_key-3F","(key)","<p>Do we know about a particular key? In other words, will calling `context`\ngive us a result that was set. …\n"],["inheritable_config_for","Mustache","Mustache.html#method-c-inheritable_config_for","(attr_name, default)","<p>Return the value of the configuration setting on the superclass, or return\nthe default.\n<p>@param [Symbol] …\n"],["mustache_in_stack","Mustache::Context","Mustache/Context.html#method-i-mustache_in_stack","()","<p>Find the first Mustache in the stack.\n<p>If we&#39;re being rendered inside a Mustache object as a context, …\n"],["new","Mustache","Mustache.html#method-c-new","(options = {})","<p>Initialize a new mustache instance. @param [Hash] options An options hash\n"],["new","Mustache::Context","Mustache/Context.html#method-c-new","(mustache)","<p>Initializes a Mustache::Context.\n<p>@param [Mustache] mustache A Mustache instance.\n"],["new","Mustache::Generator","Mustache/Generator.html#method-c-new","(options = {})","<p>Options can be used to manipulate the resulting ruby code string behavior.\n"],["new","Mustache::Parser","Mustache/Parser.html#method-c-new","(options = {})","<p>Accepts an options hash which does nothing but may be used in the future.\n"],["new","Mustache::Parser::SyntaxError","Mustache/Parser/SyntaxError.html#method-c-new","(message, position)",""],["new","Mustache::Template","Mustache/Template.html#method-c-new","(source, options = {})","<p>Expects a Mustache template as a string along with a template path, which\nit uses to find partials.  …\n"],["new","Mustache::Utils::String","Mustache/Utils/String.html#method-c-new","(string)",""],["offset","Mustache::Parser","Mustache/Parser.html#method-i-offset","()",""],["on_etag","Mustache::Generator","Mustache/Generator.html#method-i-on_etag","(name, offset)","<p>An escaped tag.\n"],["on_fetch","Mustache::Generator","Mustache/Generator.html#method-i-on_fetch","(names)",""],["on_inverted_section","Mustache::Generator","Mustache/Generator.html#method-i-on_inverted_section","(name, offset, content, raw, delims)","<p>Fired when we find an inverted section. Just like `on_section`, we&#39;re\npassed the inverted section …\n"],["on_partial","Mustache::Generator","Mustache/Generator.html#method-i-on_partial","(name, offset, indentation)","<p>Fired when the compiler finds a partial. We want to return code which calls\na partial at runtime instead …\n"],["on_section","Mustache::Generator","Mustache/Generator.html#method-i-on_section","(name, offset, content, raw, delims)","<p>Callback fired when the compiler finds a section token. We&#39;re passed\nthe section name and the array …\n"],["on_utag","Mustache::Generator","Mustache/Generator.html#method-i-on_utag","(name, offset)","<p>An unescaped tag.\n"],["otag=","Mustache::Parser","Mustache/Parser.html#method-i-otag-3D","(value)","<p>The opening tag delimiter. This may be changed at runtime.\n"],["partial","Mustache","Mustache.html#method-i-partial","(name)","<p>Override this in your subclass if you want to do fun things like reading\ntemplates from a database.  …\n"],["partial","Mustache","Mustache.html#method-c-partial","(name)","<p>Given a name, attempts to read a file and return the contents as a string.\nThe file is not rendered, …\n"],["partial","Mustache::Context","Mustache/Context.html#method-i-partial","(name, indentation = '')","<p>A {{&gt;partial}} tag translates into a call to the context&#39;s `partial`\nmethod, which would be this …\n"],["partials","Mustache::Template","Mustache/Template.html#method-i-partials","()","<p>Returns an array of partials.\n<p>Partials that belong to sections are included, but the section name is not\n…\n"],["path","Mustache","Mustache.html#method-i-path","()",""],["path","Mustache","Mustache.html#method-c-path","()","<p>Alias for `template_path`\n"],["path=","Mustache","Mustache.html#method-c-path-3D","(path)","<p>Alias for `template_path`\n"],["pop","Mustache::Context","Mustache/Context.html#method-i-pop","()","<p>Removes the most recently added object from the context&#39;s internal\nstack.\n<p>@return [Context] Returns …\n"],["position","Mustache::Parser","Mustache/Parser.html#method-i-position","()","<p>Returns [lineno, column, line]\n"],["push","Mustache::Context","Mustache/Context.html#method-i-push","(new_obj)","<p>Adds a new object to the context&#39;s internal stack.\n<p>@param [Object] new_obj Object to be added to the …\n"],["raise_on_context_miss=","Mustache","Mustache.html#method-c-raise_on_context_miss-3D","(boolean)",""],["raise_on_context_miss=","Mustache","Mustache.html#method-i-raise_on_context_miss-3D","(boolean)",""],["raise_on_context_miss?","Mustache","Mustache.html#method-i-raise_on_context_miss-3F","()","<p>Instance level version of `Mustache.raise_on_context_miss?`\n"],["raise_on_context_miss?","Mustache","Mustache.html#method-c-raise_on_context_miss-3F","()","<p>Should an exception be raised when we cannot find a corresponding method or\nkey in the current context? …\n"],["recursor","Mustache::Template","Mustache/Template.html#method-c-recursor","(toks, section, &block)","<p>Simple recursive iterator for tokens\n"],["regexp","Mustache::Parser","Mustache/Parser.html#method-i-regexp","(thing)","<p>Used to quickly convert a string into a regular expression usable by the\nstring scanner.\n"],["render","Mustache","Mustache.html#method-i-render","(data = template, ctx = {})","<p>Parses our fancy pants template file and returns normal file with all\nspecial {{tags}} and {{#sections}}replaced{{/sections}}. …\n"],["render","Mustache","Mustache.html#method-c-render","(*args)","<p>Instantiates an instance of this class and calls `render` with the passed\nargs.\n<p>@return A rendered String …\n"],["render","Mustache::Template","Mustache/Template.html#method-i-render","(context)","<p>Renders the `@source` Mustache template using the given `context`, which\nshould be a simple hash keyed …\n"],["render_file","Mustache","Mustache.html#method-i-render_file","(name, context = {})","<p>Given a file name and an optional context, attempts to load and render the\nfile as a template.\n"],["render_file","Mustache","Mustache.html#method-c-render_file","(name, context = {})","<p>Given a file name and an optional context, attempts to load and render the\nfile as a template.\n"],["rescued_const_get","Mustache","Mustache.html#method-c-rescued_const_get","(name)",""],["scan_tag_","Mustache::Parser","Mustache/Parser.html#method-i-scan_tag_","(content, fetch, padding, pre_match_position)","<p>This function handles the cases where the scanned tag does not have a type.\n"],["scan_tag_block","Mustache::Parser","Mustache/Parser.html#method-i-scan_tag_block","(content, fetch, padding, pre_match_position)",""],["scan_tag_close","Mustache::Parser","Mustache/Parser.html#method-i-scan_tag_close","(content, fetch, padding, pre_match_position)",""],["scan_tag_comment","Mustache::Parser","Mustache/Parser.html#method-i-scan_tag_comment","(content, fetch, padding, pre_match_position)",""],["scan_tag_delimiter","Mustache::Parser","Mustache/Parser.html#method-i-scan_tag_delimiter","(content, fetch, padding, pre_match_position)",""],["scan_tag_inverted","Mustache::Parser","Mustache/Parser.html#method-i-scan_tag_inverted","(content, fetch, padding, pre_match_position)",""],["scan_tag_open_partial","Mustache::Parser","Mustache/Parser.html#method-i-scan_tag_open_partial","(content, fetch, padding, pre_match_position)",""],["scan_tag_unescaped","Mustache::Parser","Mustache/Parser.html#method-i-scan_tag_unescaped","(content, fetch, padding, pre_match_position)",""],["scan_tags","Mustache::Parser","Mustache/Parser.html#method-i-scan_tags","()","<p>Find {{mustaches}} and add them to the @result array.\n"],["scan_text","Mustache::Parser","Mustache/Parser.html#method-i-scan_text","()","<p>Try to find static text, e.g. raw HTML with no {{mustaches}}.\n"],["scan_until_exclusive","Mustache::Parser","Mustache/Parser.html#method-i-scan_until_exclusive","(regexp)","<p>Scans the string until the pattern is matched. Returns the substring\n<strong>excluding</strong> the end of the match, …\n"],["sections","Mustache::Template","Mustache/Template.html#method-i-sections","()","<p>Returns an array of sections.\n<p>Sections that belong to other sections will be of the form\n`section1.childsection` …\n"],["str","Mustache::Generator","Mustache/Generator.html#method-i-str","(s)",""],["tags","Mustache::Template","Mustache/Template.html#method-i-tags","()","<p>Returns an array of tags.\n<p>Tags that belong to sections will be of the form `section1.tag`.\n<p>@return [Array] …\n"],["template","Mustache","Mustache.html#method-c-template","()","<p>The template is the actual string Mustache uses as its template. There is a\nbit of magic here: what we …\n"],["template","Mustache","Mustache.html#method-i-template","()","<p>The template can be set at the instance level.\n"],["template=","Mustache","Mustache.html#method-c-template-3D","(template)",""],["template=","Mustache","Mustache.html#method-i-template-3D","(template)",""],["template_extension","Mustache","Mustache.html#method-c-template_extension","()","<p>A Mustache template&#39;s default extension is &#39;mustache&#39;, but this\ncan be changed.\n"],["template_extension","Mustache","Mustache.html#method-i-template_extension","()",""],["template_extension=","Mustache","Mustache.html#method-c-template_extension-3D","(template_extension)",""],["template_extension=","Mustache","Mustache.html#method-i-template_extension-3D","(template_extension)",""],["template_file","Mustache","Mustache.html#method-c-template_file","()","<p>The template file is the absolute path of the file Mustache will use as its\ntemplate. By default it&#39;s …\n"],["template_file","Mustache","Mustache.html#method-i-template_file","()","<p>The template file is the absolute path of the file Mustache will use as its\ntemplate. By default it&#39;s …\n"],["template_file=","Mustache","Mustache.html#method-c-template_file-3D","(template_file)",""],["template_file=","Mustache","Mustache.html#method-i-template_file-3D","(template_file)",""],["template_for_partial","Mustache::Context","Mustache/Context.html#method-i-template_for_partial","(partial)",""],["template_name","Mustache","Mustache.html#method-i-template_name","()",""],["template_name","Mustache","Mustache.html#method-c-template_name","()","<p>The template name is the Mustache template file without any extension or\nother information. Defaults …\n"],["template_name=","Mustache","Mustache.html#method-i-template_name-3D","(template_name)",""],["template_name=","Mustache","Mustache.html#method-c-template_name-3D","(template_name)",""],["template_path","Mustache","Mustache.html#method-c-template_path","()","<p>The template path informs your Mustache view where to look for its\ncorresponding template. By default …\n"],["template_path","Mustache","Mustache.html#method-i-template_path","()",""],["template_path=","Mustache","Mustache.html#method-c-template_path-3D","(path)",""],["template_path=","Mustache","Mustache.html#method-i-template_path-3D","(path)",""],["templateify","Mustache","Mustache.html#method-c-templateify","(obj, options = {})","<p>@param [Template,String] obj      Turns `obj` into a template @param [Hash]\noptions  Options …\n"],["templateify","Mustache","Mustache.html#method-i-templateify","(obj)",""],["to_s","Mustache::Parser::SyntaxError","Mustache/Parser/SyntaxError.html#method-i-to_s","()",""],["to_s","Mustache::Template","Mustache/Template.html#method-i-to_s","(src = @source)",""],["tokens","Mustache::Template","Mustache/Template.html#method-i-tokens","(src = @source)","<p>Returns an array of tokens for a given template.\n<p>@return [Array] Array of tokens.\n"],["underscore","Mustache","Mustache.html#method-c-underscore","(classified = name)","\n<pre>TemplatePartial =&gt; template_partial</pre>\n<p>Template::Partial =&gt; template/partial Takes a string but defaults …\n"],["underscore","Mustache::Utils::String","Mustache/Utils/String.html#method-i-underscore","(view_namespace)",""],["valid_types","Mustache::Parser","Mustache/Parser.html#method-c-valid_types","()",""],["view_class","Mustache","Mustache.html#method-c-view_class","(name)","<p>When given a symbol or string representing a class, will try to produce an\nappropriate view class. e.g. …\n"],["view_namespace","Mustache","Mustache.html#method-c-view_namespace","()","<p>The constant under which Mustache will look for views when autoloading. By\ndefault the view namespace …\n"],["view_namespace=","Mustache","Mustache.html#method-c-view_namespace-3D","(namespace)",""],["view_path","Mustache","Mustache.html#method-c-view_path","()","<p>Mustache searches the view path for .rb files to require when asked to find\na view class. Defaults to …\n"],["view_path=","Mustache","Mustache.html#method-c-view_path-3D","(path)",""]]}}