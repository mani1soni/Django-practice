var search_data = {"index":{"searchIndex":["argf","array","backports","most_extreme_object_ever","random","implementation","mt19937","stdlib","loadedfeatures","klass;","mod;","basicobject","bignum","binding","comparable","complex","dir","env","enumerable","enumerator","enumerator","generatorbp","lazy","yielder","exceptionformatrix","falseclass","file","constants","rbconfig","fixnum","float","gc","hash","io","integer","kernel","math","matrix","coercionhelper","conversionhelper","eigenvaluedecomposition","lupdecomposition","scalar","method","receiver;","module","nilclass","numeric","object","objectspace","openstruct","prime","eratosthenesgenerator","eratosthenessieve","generator23","pseudoprimegenerator","trialdivision","trialdivisiongenerator","proc","process","random","range","regexp","set","stopiteration","string","struct","symbol","trueclass","unboundmethod","unicodenormalize","vector","zerovectorerror","*()","*()","**()","+()","+()","+@()","-()","-()","-@()","/()","/()","<()","<()","<<()","<=()","<=>()","==()","==()","==()","===()","=~()",">()",">()",">=()","i()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","__callee__()","__method__()","__set_inspect()","_rand_range()","advise()","alias_method()","alias_method_chain()","alias_method_chain()","ascii_only?()","assoc()","bind_with_additional_info()","binread()","binwrite()","bit_length()","bit_length()","bsearch()","bsearch()","bsearch_index()","build()","build_eigenvectors()","bytes()","byteslice()","cache()","camelize()","canonical_ordering_one()","capitalize()","casecmp()","cdiv()","chars()","chr()","chunk()","chunk()","chunk_while()","clamp()","clear()","clone()","clone()","codepoints()","coerce()","coerce()","coerce_to()","coerce_to_ary()","coerce_to_comparison()","coerce_to_hash()","coerce_to_int()","coerce_to_option()","coerce_to_options()","coerce_to_str()","collect()","collect()","collect()","collect2()","collect_concat()","collect_concat()","column()","column_vector()","column_vectors()","columns()","combination()","combine_mode_and_option()","combine_mode_perm_and_option()","compact()","compact!()","component()","component()","compute_primes()","conj()","conjugate()","constantize()","constructor_without_key_value_pair_form()","convert_all_arguments_to_path()","convert_first_argument_to_path()","convert_path()","convert_seed()","count()","covector()","curry()","curry()","cycle()","cycle()","d()","dasherize()","default_proc=()","default_proc_with_nil=()","define_singleton_method()","delete_if()","demodulize()","det()","det()","det_e()","determinant()","determinant()","determinant_bareiss()","determinant_e()","diagonal()","diagonal?()","diagonalize()","dig()","dig()","dig()","div()","downcase()","drop()","drop()","drop_while()","drop_while()","dup()","dup()","dup()","dup()","dup()","each()","each()","each()","each()","each()","each2()","each_char()","each_char()","each_char()","each_entry()","each_pair()","each_prime()","each_with_index()","each_with_index_with_optional_args_and_block()","each_with_object()","eigen()","eigensystem()","eigenvalue_matrix()","eigenvalues()","eigenvector_matrix()","eigenvector_matrix_inv()","eigenvectors()","element()","element()","elements()","elements_to_f()","elements_to_f()","elements_to_i()","elements_to_i()","elements_to_r()","elements_to_r()","empty()","empty?()","empty?()","end_with?()","entries_with_optional_arguments()","enum_for()","eql?()","eql?()","eql?()","eql?()","eval()","even?()","expand_path_with_potential_to_path()","extend_relative()","extract_options!()","fdiv()","fetch_values()","find_all()","find_index()","find_index()","first()","flat_map()","flat_map()","flatten_with_optional_argument()","flatten_with_optional_argument!()","float_to_integer()","from_prime_division()","get_nth_prime()","grep()","grep_v()","group_by()","hangul_comp_one()","hangul_decomp_one()","hash()","hash()","hash()","hash()","hermitian?()","hessenberg_to_real_schur()","home()","identity()","imag()","imaginary()","include?()","index()","index_with_block()","inherited()","initialize_with_optional_block()","inject_with_symbol()","inner_product()","inspect()","inspect()","inspect()","inspect()","instance_exec()","instance_method_with_additional_info()","int_from_prime_division()","integer_to_float()","inv()","inverse()","is_array?()","itself()","keep_if()","keep_if()","keep_if()","l()","lambda?()","lambda_with_lambda_tracking()","lazy()","lazy()","left()","left()","length()","length()","log2()","log_with_optional_base()","loop_with_stop_iteration()","lower_triangular?()","lup()","lup_decomposition()","magnitude()","make_block_optional()","map()","map()","map()","map2()","map_via_packing()","mark_as_loaded()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","mask_32_bits()","match()","match?()","match?()","max_by()","method_with_additional_info()","min_by()","minmax()","minmax_by()","minor()","mktmpdir()","module_exec()","negative?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_seed()","next()","next()","next()","next()","next()","next()","next_float()","next_state()","nfc_one()","nfd_one()","none?()","norm()","normal?()","normalize()","normalize()","normalized?()","odd?()","one?()","open_with_options_hash()","open_with_options_hash()","ord()","ord()","orthogonal?()","p()","partition_with_new_meaning()","permutation()","permutation?()","pop_with_optional_argument()","positive?()","pred()","prepend()","prev_float()","prime?()","prime?()","prime_division()","prime_division()","primes()","primes_so_far()","proc_with_lambda_tracking()","product()","product_with_block()","public_method()","public_send()","r()","rand()","random_32_bits()","random_bytes()","random_float()","random_integer()","rank()","rank_e()","rassoc()","real()","real?()","rect()","rectangular()","recursively_flatten_finite()","reduce_to_hessenberg()","regular?()","reject()","repeated_combination()","repeated_permutation()","require_relative()","require_relative_dir()","require_with_backports()","reverse_each()","reverse_merge()","reverse_merge!()","rewind()","rewind()","rewind()","rewind()","rewind()","rindex_with_block()","rotate()","rotate!()","round()","round_with_digits()","round_with_digits()","round_with_digits()","row()","row_size()","row_vector()","row_vectors()","rows()","rpartition()","sample()","scalar()","seed=()","select()","select!()","select!()","select_with_hash_return()","set_component()","set_component()","set_element()","set_element()","shift_with_optional_argument()","shuffle()","shuffle!()","singleton_class()","singular?()","singular?()","size()","size()","size()","size()","size()","slice_after()","slice_before()","slice_when()","solve()","sort_by!()","square?()","srand()","start_with?()","state()","state_as_bignum()","stress()","stress=()","stringify_keys()","stringify_keys!()","succ()","succ()","succ()","succ()","succ()","sum()","super_method()","suppress_verbose_warnings()","swapcase()","symbolize_keys()","symbolize_keys!()","symmetric?()","t()","take()","take()","take_while()","take_while()","tap()","to_a()","to_a()","to_a()","to_a()","to_a_with_optional_arguments()","to_ary()","to_ary()","to_enum()","to_h()","to_h()","to_h()","to_h()","to_h()","to_proc()","to_proc()","to_proc_with_lambda_tracking()","to_r()","to_s()","to_s()","tr()","trace()","transform_values()","transform_values!()","transpose()","tridiagonalize()","try()","try_convert()","try_convert()","try_convert()","try_convert()","try_convert()","try_convert()","u()","unbind_with_additional_info()","underscore()","unicode_normalize()","unicode_normalize!()","unicode_normalized?()","union_with_array_argument()","uniq()","uniq_with_block()","uniq_with_block!()","unit()","unitary?()","upcase()","upper_bound()","upper_bound=()","upper_triangular?()","upto_with_exclusive()","v()","v_inv()","with_index()","with_index()","with_object()","write()","write()","yield()","zero()","zero?()","zip()"],"longSearchIndex":["argf","array","backports","backports::most_extreme_object_ever","backports::random","backports::random::implementation","backports::random::mt19937","backports::stdlib","backports::stdlib::loadedfeatures","backports::klass;","backports::mod;","basicobject","bignum","binding","comparable","complex","dir","env","enumerable","enumerable::enumerator","enumerator","enumerator::generatorbp","enumerator::lazy","enumerator::yielder","exceptionformatrix","falseclass","file","file::constants","file::constants::rbconfig","fixnum","float","gc","hash","io","integer","kernel","math","matrix","matrix::coercionhelper","matrix::conversionhelper","matrix::eigenvaluedecomposition","matrix::lupdecomposition","matrix::scalar","method","method::receiver;","module","nilclass","numeric","object","objectspace","openstruct","prime","prime::eratosthenesgenerator","prime::eratosthenessieve","prime::generator23","prime::pseudoprimegenerator","prime::trialdivision","prime::trialdivisiongenerator","proc","process","random","range","regexp","set","stopiteration","string","struct","symbol","trueclass","unboundmethod","unicodenormalize","vector","vector::zerovectorerror","matrix#*()","vector#*()","matrix#**()","matrix#+()","vector#+()","string#+@()","matrix#-()","vector#-()","string#-@()","matrix#/()","vector#/()","backports::most_extreme_object_ever::<()","hash#<()","enumerator::yielder#<<()","hash#<=()","symbol#<=>()","backports::random::implementation#==()","matrix#==()","vector#==()","basicobject::===()","symbol#=~()","backports::most_extreme_object_ever::>()","hash#>()","hash#>=()","matrix::i()","backports::random::mt19937::[]()","hash::[]()","matrix::[]()","matrix#[]()","openstruct#[]()","prime::trialdivision#[]()","symbol#[]()","vector::[]()","vector#[]()","matrix#[]=()","openstruct#[]=()","vector#[]=()","kernel#__callee__()","kernel#__method__()","enumerator::lazy#__set_inspect()","backports::random::implementation#_rand_range()","io#advise()","backports::alias_method()","backports::alias_method_chain()","module#alias_method_chain()","string#ascii_only?()","hash#assoc()","unboundmethod#bind_with_additional_info()","io::binread()","io::binwrite()","bignum#bit_length()","fixnum#bit_length()","array#bsearch()","range#bsearch()","array#bsearch_index()","matrix::build()","matrix::eigenvaluedecomposition#build_eigenvectors()","backports::random::implementation#bytes()","string#byteslice()","prime::trialdivision#cache()","string#camelize()","unicodenormalize::canonical_ordering_one()","symbol#capitalize()","symbol#casecmp()","matrix::eigenvaluedecomposition#cdiv()","io#chars()","string#chr()","enumerable#chunk()","enumerator::lazy#chunk()","enumerable#chunk_while()","comparable#clamp()","string#clear()","matrix#clone()","vector#clone()","string#codepoints()","matrix#coerce()","vector#coerce()","backports::coerce_to()","backports::coerce_to_ary()","backports::coerce_to_comparison()","backports::coerce_to_hash()","backports::coerce_to_int()","backports::coerce_to_option()","backports::coerce_to_options()","backports::coerce_to_str()","enumerator::lazy#collect()","matrix#collect()","vector#collect()","vector#collect2()","enumerable#collect_concat()","enumerator::lazy#collect_concat()","matrix#column()","matrix::column_vector()","matrix#column_vectors()","matrix::columns()","array#combination()","backports::combine_mode_and_option()","backports::combine_mode_perm_and_option()","hash#compact()","hash#compact!()","matrix#component()","vector#component()","prime::eratosthenessieve#compute_primes()","matrix#conj()","matrix#conjugate()","string#constantize()","hash::constructor_without_key_value_pair_form()","backports::convert_all_arguments_to_path()","backports::convert_first_argument_to_path()","backports::convert_path()","backports::random::mt19937::convert_seed()","enumerable#count()","vector#covector()","method#curry()","proc#curry()","array#cycle()","enumerable#cycle()","matrix::eigenvaluedecomposition#d()","string#dasherize()","hash#default_proc=()","hash#default_proc_with_nil=()","kernel#define_singleton_method()","set#delete_if()","string#demodulize()","matrix#det()","matrix::lupdecomposition#det()","matrix#det_e()","matrix#determinant()","matrix::lupdecomposition#determinant()","matrix#determinant_bareiss()","matrix#determinant_e()","matrix::diagonal()","matrix#diagonal?()","matrix::eigenvaluedecomposition#diagonalize()","array#dig()","hash#dig()","struct#dig()","fixnum#div()","symbol#downcase()","enumerable#drop()","enumerator::lazy#drop()","enumerable#drop_while()","enumerator::lazy#drop_while()","falseclass#dup()","fixnum#dup()","float#dup()","nilclass#dup()","trueclass#dup()","enumerator::generatorbp#each()","matrix#each()","prime#each()","prime::pseudoprimegenerator#each()","vector#each()","vector#each2()","argf::each_char()","io#each_char()","string#each_char()","enumerable#each_entry()","openstruct#each_pair()","integer::each_prime()","matrix#each_with_index()","enumerable#each_with_index_with_optional_args_and_block()","enumerable#each_with_object()","matrix#eigen()","matrix#eigensystem()","matrix::eigenvaluedecomposition#eigenvalue_matrix()","matrix::eigenvaluedecomposition#eigenvalues()","matrix::eigenvaluedecomposition#eigenvector_matrix()","matrix::eigenvaluedecomposition#eigenvector_matrix_inv()","matrix::eigenvaluedecomposition#eigenvectors()","matrix#element()","vector#element()","vector::elements()","matrix#elements_to_f()","vector#elements_to_f()","matrix#elements_to_i()","vector#elements_to_i()","matrix#elements_to_r()","vector#elements_to_r()","matrix::empty()","matrix#empty?()","symbol#empty?()","string#end_with?()","enumerable#entries_with_optional_arguments()","enumerator::lazy#enum_for()","hash#eql?()","matrix#eql?()","openstruct#eql?()","vector#eql?()","binding#eval()","integer#even?()","file::expand_path_with_potential_to_path()","backports::stdlib::extend_relative()","array#extract_options!()","fixnum#fdiv()","hash#fetch_values()","enumerator::lazy#find_all()","enumerable#find_index()","matrix#find_index()","enumerable#first()","enumerable#flat_map()","enumerator::lazy#flat_map()","array#flatten_with_optional_argument()","array#flatten_with_optional_argument!()","backports::float_to_integer()","integer::from_prime_division()","prime::eratosthenessieve#get_nth_prime()","enumerator::lazy#grep()","enumerable#grep_v()","enumerable#group_by()","unicodenormalize::hangul_comp_one()","unicodenormalize::hangul_decomp_one()","hash#hash()","matrix#hash()","openstruct#hash()","vector#hash()","matrix#hermitian?()","matrix::eigenvaluedecomposition#hessenberg_to_real_schur()","dir::home()","matrix::identity()","matrix#imag()","matrix#imaginary()","backports::stdlib::loadedfeatures#include?()","matrix#index()","array#index_with_block()","basicobject::inherited()","enumerator#initialize_with_optional_block()","enumerable#inject_with_symbol()","vector#inner_product()","enumerator::lazy#inspect()","matrix#inspect()","random#inspect()","vector#inspect()","kernel#instance_exec()","module#instance_method_with_additional_info()","prime#int_from_prime_division()","backports::integer_to_float()","matrix#inv()","matrix#inverse()","backports::is_array?()","kernel#itself()","array#keep_if()","hash#keep_if()","set#keep_if()","matrix::lupdecomposition#l()","proc#lambda?()","kernel#lambda_with_lambda_tracking()","enumerable#lazy()","enumerator::lazy#lazy()","backports::random::implementation#left()","backports::random::mt19937#left()","string#length()","symbol#length()","math::log2()","math::log_with_optional_base()","kernel#loop_with_stop_iteration()","matrix#lower_triangular?()","matrix#lup()","matrix#lup_decomposition()","vector#magnitude()","backports::make_block_optional()","enumerator::lazy#map()","matrix#map()","vector#map()","vector#map2()","backports::map_via_packing()","backports::stdlib::loadedfeatures::mark_as_loaded()","backports::random::implementation#marshal_dump()","backports::random::mt19937#marshal_dump()","backports::random::implementation#marshal_load()","backports::random::mt19937#marshal_load()","backports::random::mt19937#mask_32_bits()","symbol#match()","regexp#match?()","string#match?()","enumerable#max_by()","kernel#method_with_additional_info()","enumerable#min_by()","enumerable#minmax()","enumerable#minmax_by()","matrix#minor()","dir::mktmpdir()","module#module_exec()","numeric#negative?()","backports::random::implementation::new()","backports::random::mt19937::new()","enumerator::generatorbp::new()","enumerator::lazy::new()","enumerator::yielder::new()","matrix::new()","matrix::eigenvaluedecomposition::new()","matrix::lupdecomposition::new()","prime::eratosthenesgenerator::new()","prime::eratosthenessieve::new()","prime::generator23::new()","prime::pseudoprimegenerator::new()","prime::trialdivisiongenerator::new()","vector::new()","random::new_seed()","enumerable::enumerator#next()","prime::eratosthenesgenerator#next()","prime::generator23#next()","prime::pseudoprimegenerator#next()","prime::trialdivisiongenerator#next()","symbol#next()","float#next_float()","backports::random::mt19937#next_state()","unicodenormalize::nfc_one()","unicodenormalize::nfd_one()","enumerable#none?()","vector#norm()","matrix#normal?()","unicodenormalize::normalize()","vector#normalize()","unicodenormalize::normalized?()","integer#odd?()","enumerable#one?()","io::open_with_options_hash()","object#open_with_options_hash()","integer#ord()","string#ord()","matrix#orthogonal?()","matrix::lupdecomposition#p()","string#partition_with_new_meaning()","array#permutation()","matrix#permutation?()","array#pop_with_optional_argument()","numeric#positive?()","integer#pred()","string#prepend()","float#prev_float()","integer#prime?()","prime#prime?()","integer#prime_division()","prime#prime_division()","prime::trialdivision#primes()","prime::trialdivision#primes_so_far()","kernel#proc_with_lambda_tracking()","array#product()","array#product_with_block()","kernel#public_method()","kernel#public_send()","vector#r()","backports::random::implementation#rand()","backports::random::mt19937#random_32_bits()","backports::random::mt19937#random_bytes()","backports::random::mt19937#random_float()","backports::random::mt19937#random_integer()","matrix#rank()","matrix#rank_e()","hash#rassoc()","matrix#real()","matrix#real?()","matrix#rect()","matrix#rectangular()","array#recursively_flatten_finite()","matrix::eigenvaluedecomposition#reduce_to_hessenberg()","matrix#regular?()","enumerator::lazy#reject()","array#repeated_combination()","array#repeated_permutation()","kernel#require_relative()","backports::require_relative_dir()","kernel#require_with_backports()","enumerable#reverse_each()","hash#reverse_merge()","hash#reverse_merge!()","enumerable::enumerator#rewind()","prime::eratosthenesgenerator#rewind()","prime::generator23#rewind()","prime::pseudoprimegenerator#rewind()","prime::trialdivisiongenerator#rewind()","array#rindex_with_block()","array#rotate()","array#rotate!()","matrix#round()","float#round_with_digits()","integer#round_with_digits()","numeric#round_with_digits()","matrix#row()","matrix#row_size()","matrix::row_vector()","matrix#row_vectors()","matrix::rows()","string#rpartition()","array#sample()","matrix::scalar()","backports::random::mt19937#seed=()","enumerator::lazy#select()","array#select!()","hash#select!()","hash#select_with_hash_return()","matrix#set_component()","vector#set_component()","matrix#set_element()","vector#set_element()","array#shift_with_optional_argument()","array#shuffle()","array#shuffle!()","kernel#singleton_class()","matrix#singular?()","matrix::lupdecomposition#singular?()","file#size()","prime::pseudoprimegenerator#size()","range#size()","symbol#size()","vector#size()","enumerable#slice_after()","enumerable#slice_before()","enumerable#slice_when()","matrix::lupdecomposition#solve()","array#sort_by!()","matrix#square?()","backports::random::implementation#srand()","string#start_with?()","backports::random::implementation#state()","backports::random::mt19937#state_as_bignum()","gc::stress()","gc::stress=()","hash#stringify_keys()","hash#stringify_keys!()","prime::eratosthenesgenerator#succ()","prime::generator23#succ()","prime::pseudoprimegenerator#succ()","prime::trialdivisiongenerator#succ()","symbol#succ()","enumerable#sum()","method#super_method()","backports::suppress_verbose_warnings()","symbol#swapcase()","hash#symbolize_keys()","hash#symbolize_keys!()","matrix#symmetric?()","matrix#t()","enumerable#take()","enumerator::lazy#take()","enumerable#take_while()","enumerator::lazy#take_while()","kernel#tap()","matrix#to_a()","matrix::eigenvaluedecomposition#to_a()","matrix::lupdecomposition#to_a()","vector#to_a()","enumerable#to_a_with_optional_arguments()","matrix::eigenvaluedecomposition#to_ary()","matrix::lupdecomposition#to_ary()","enumerator::lazy#to_enum()","enumerable#to_h()","hash#to_h()","nilclass#to_h()","openstruct#to_h()","struct#to_h()","hash#to_proc()","symbol#to_proc()","method#to_proc_with_lambda_tracking()","complex#to_r()","matrix#to_s()","vector#to_s()","matrix#tr()","matrix#trace()","hash#transform_values()","hash#transform_values!()","matrix#transpose()","matrix::eigenvaluedecomposition#tridiagonalize()","object#try()","array::try_convert()","backports::try_convert()","hash::try_convert()","io::try_convert()","regexp::try_convert()","string::try_convert()","matrix::lupdecomposition#u()","method#unbind_with_additional_info()","string#underscore()","string#unicode_normalize()","string#unicode_normalize!()","string#unicode_normalized?()","regexp::union_with_array_argument()","enumerable#uniq()","array#uniq_with_block()","array#uniq_with_block!()","matrix::unit()","matrix#unitary?()","symbol#upcase()","prime::pseudoprimegenerator#upper_bound()","prime::pseudoprimegenerator#upper_bound=()","matrix#upper_triangular?()","string#upto_with_exclusive()","matrix::eigenvaluedecomposition#v()","matrix::eigenvaluedecomposition#v_inv()","enumerable::enumerator#with_index()","prime::pseudoprimegenerator#with_index()","prime::pseudoprimegenerator#with_object()","backports::write()","io::write()","enumerator::yielder#yield()","matrix::zero()","matrix#zero?()","enumerator::lazy#zip()"],"info":[["ARGF","","ARGF.html","",""],["Array","","Array.html","",""],["Backports","","Backports.html","",""],["Backports::MOST_EXTREME_OBJECT_EVER","","Backports/MOST_EXTREME_OBJECT_EVER.html","",""],["Backports::Random","","Backports/Random.html","",""],["Backports::Random::Implementation","","Backports/Random/Implementation.html","","<p>Implementation corresponding to the actual Random class of Ruby The actual\nrandom generator (mersenne …\n"],["Backports::Random::MT19937","","Backports/Random/MT19937.html","","<p>An implementation of Mersenne Twister MT19937 in Ruby\n<p>Supplement the MT19937 class with methods to do …\n"],["Backports::StdLib","","Backports/StdLib.html","",""],["Backports::StdLib::LoadedFeatures","","Backports/StdLib/LoadedFeatures.html","",""],["Backports::klass;","","Backports/klass;.html","",""],["Backports::mod;","","Backports/mod;.html","",""],["BasicObject","","BasicObject.html","",""],["Bignum","","Bignum.html","",""],["Binding","","Binding.html","",""],["Comparable","","Comparable.html","",""],["Complex","","Complex.html","",""],["Dir","","Dir.html","",""],["ENV","","ENV.html","",""],["Enumerable","","Enumerable.html","",""],["Enumerable::Enumerator","","Enumerable/Enumerator.html","",""],["Enumerator","","Enumerator.html","","<p>new with block, standard in Ruby 1.9\n"],["Enumerator::GeneratorBP","","Enumerator/GeneratorBP.html","",""],["Enumerator::Lazy","","Enumerator/Lazy.html","",""],["Enumerator::Yielder","","Enumerator/Yielder.html","","<p>A simple class which allows the construction of Enumerator from a block\n"],["ExceptionForMatrix","","ExceptionForMatrix.html","",""],["FalseClass","","FalseClass.html","",""],["File","","File.html","",""],["File::Constants","","File/Constants.html","",""],["File::Constants::RbConfig","","File/Constants/RbConfig.html","",""],["Fixnum","","Fixnum.html","",""],["Float","","Float.html","",""],["GC","","GC.html","",""],["Hash","","Hash.html","",""],["IO","","IO.html","",""],["Integer","","Integer.html","",""],["Kernel","","Kernel.html","",""],["Math","","Math.html","",""],["Matrix","","Matrix.html","",""],["Matrix::CoercionHelper","","Matrix/CoercionHelper.html","",""],["Matrix::ConversionHelper","","Matrix/ConversionHelper.html","",""],["Matrix::EigenvalueDecomposition","","Matrix/EigenvalueDecomposition.html","","<p>Eigenvalues and eigenvectors of a real matrix.\n<p>Computes the eigenvalues and eigenvectors of a matrix  …\n"],["Matrix::LUPDecomposition","","Matrix/LUPDecomposition.html","","<p>For an m-by-n matrix A with m &gt;= n, the LU decomposition is an m-by-n\nunit lower triangular matrix …\n"],["Matrix::Scalar","","Matrix/Scalar.html","",""],["Method","","Method.html","",""],["Method::receiver;","","Method/receiver;.html","",""],["Module","","Module.html","",""],["NilClass","","NilClass.html","",""],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["ObjectSpace","","ObjectSpace.html","",""],["OpenStruct","","OpenStruct.html","",""],["Prime","","Prime.html","","<p>The set of all prime numbers.\n<p>Example\n\n<pre>Prime.each(100) do |prime|\n  p prime  #=&gt; 2, 3, 5, 7, 11, ...., 97 ...</pre>\n"],["Prime::EratosthenesGenerator","","Prime/EratosthenesGenerator.html","","<p>An implementation of <code>PseudoPrimeGenerator</code>.\n<p>Uses <code>EratosthenesSieve</code>.\n"],["Prime::EratosthenesSieve","","Prime/EratosthenesSieve.html","","<p>Internal use. An implementation of eratosthenes&#39; sieve\n"],["Prime::Generator23","","Prime/Generator23.html","","<p>Generates all integers which are greater than 2 and are not divisible by\neither 2 or 3.\n<p>This is a pseudo-prime …\n"],["Prime::PseudoPrimeGenerator","","Prime/PseudoPrimeGenerator.html","","<p>An abstract class for enumerating pseudo-prime numbers.\n<p>Concrete subclasses should override succ, next, …\n"],["Prime::TrialDivision","","Prime/TrialDivision.html","","<p>Internal use. An implementation of prime table by trial division method.\n"],["Prime::TrialDivisionGenerator","","Prime/TrialDivisionGenerator.html","","<p>An implementation of <code>PseudoPrimeGenerator</code> which uses a prime\ntable generated by trial division.\n"],["Proc","","Proc.html","",""],["Process","","Process.html","",""],["Random","","Random.html","",""],["Range","","Range.html","",""],["Regexp","","Regexp.html","",""],["Set","","Set.html","",""],["StopIteration","","StopIteration.html","",""],["String","","String.html","",""],["Struct","","Struct.html","",""],["Symbol","","Symbol.html","",""],["TrueClass","","TrueClass.html","",""],["UnboundMethod","","UnboundMethod.html","",""],["UnicodeNormalize","","UnicodeNormalize.html","",""],["Vector","","Vector.html","","<p>The <code>Vector</code> class represents a mathematical vector, which is\nuseful in its own right, and also constitutes …\n"],["Vector::ZeroVectorError","","Vector/ZeroVectorError.html","",""],["*","Matrix","Matrix.html#method-i-2A","(m)","<p>Matrix multiplication.\n\n<pre>Matrix[[2,4], [6,8]] * Matrix.identity(2)\n  =&gt; 2 4\n     6 8</pre>\n"],["*","Vector","Vector.html#method-i-2A","(x)","<p>Multiplies the vector by <code>x</code>, where <code>x</code> is a number\nor another vector.\n"],["**","Matrix","Matrix.html#method-i-2A-2A","(other)","<p>Matrix exponentiation. Equivalent to multiplying the matrix by itself N\ntimes. Non integer exponents …\n"],["+","Matrix","Matrix.html#method-i-2B","(m)","<p>Matrix addition.\n\n<pre>Matrix.scalar(2,5) + Matrix[[1,0], [-4,7]]\n  =&gt;  6  0\n     -4 12</pre>\n"],["+","Vector","Vector.html#method-i-2B","(v)","<p>Vector addition.\n"],["+@","String","String.html#method-i-2B-40","()",""],["-","Matrix","Matrix.html#method-i-2D","(m)","<p>Matrix subtraction.\n\n<pre>Matrix[[1,5], [4,2]] - Matrix[[9,3], [-4,1]]\n  =&gt; -8  2\n      8  1</pre>\n"],["-","Vector","Vector.html#method-i-2D","(v)","<p>Vector subtraction.\n"],["-@","String","String.html#method-i-2D-40","()",""],["/","Matrix","Matrix.html#method-i-2F","(other)","<p>Matrix division (multiplication by the inverse).\n\n<pre>Matrix[[7,6], [3,9]] / Matrix[[2,9], [3,1]]\n  =&gt; -7  ...</pre>\n"],["/","Vector","Vector.html#method-i-2F","(x)","<p>Vector division.\n"],["<","Backports::MOST_EXTREME_OBJECT_EVER","Backports/MOST_EXTREME_OBJECT_EVER.html#method-c-3C","(whatever)",""],["<","Hash","Hash.html#method-i-3C","(hash)",""],["<<","Enumerator::Yielder","Enumerator/Yielder.html#method-i-3C-3C","(*arg)",""],["<=","Hash","Hash.html#method-i-3C-3D","(hash)",""],["<=>","Symbol","Symbol.html#method-i-3C-3D-3E","(with)",""],["==","Backports::Random::Implementation","Backports/Random/Implementation.html#method-i-3D-3D","(other)",""],["==","Matrix","Matrix.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if and only if the two matrices contain equal\nelements.\n"],["==","Vector","Vector.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> iff the two vectors have the same elements in the\nsame order.\n"],["===","BasicObject","BasicObject.html#method-c-3D-3D-3D","(cmp)",""],["=~","Symbol","Symbol.html#method-i-3D-7E","(with)",""],[">","Backports::MOST_EXTREME_OBJECT_EVER","Backports/MOST_EXTREME_OBJECT_EVER.html#method-c-3E","(whatever)",""],[">","Hash","Hash.html#method-i-3E","(hash)",""],[">=","Hash","Hash.html#method-i-3E-3D","(hash)",""],["I","Matrix","Matrix.html#method-c-I","(n)",""],["[]","Backports::Random::MT19937","Backports/Random/MT19937.html#method-c-5B-5D","(seed)",""],["[]","Hash","Hash.html#method-c-5B-5D","(*args)",""],["[]","Matrix","Matrix.html#method-c-5B-5D","(*rows)","<p>Creates a matrix where each argument is a row.\n\n<pre>Matrix[ [25, 93], [-1, 66] ]\n   =&gt;  25 93\n       -1 66</pre>\n"],["[]","Matrix","Matrix.html#method-i-5B-5D","(i, j)","<p>Returns element (<code>i</code>,<code>j</code>) of the matrix.  That is:\nrow <code>i</code>, column <code>j</code>.\n"],["[]","OpenStruct","OpenStruct.html#method-i-5B-5D","(name)",""],["[]","Prime::TrialDivision","Prime/TrialDivision.html#method-i-5B-5D","(index)","<p>Returns the +index+th prime number.\n<p><code>index</code> is a 0-based index.\n"],["[]","Symbol","Symbol.html#method-i-5B-5D","(*args)",""],["[]","Vector","Vector.html#method-c-5B-5D","(*array)","<p>Creates a Vector from a list of elements.\n\n<pre>Vector[7, 4, ...]</pre>\n"],["[]","Vector","Vector.html#method-i-5B-5D","(i)","<p>Returns element number <code>i</code> (starting at zero) of the vector.\n"],["[]=","Matrix","Matrix.html#method-i-5B-5D-3D","(i, j, v)",""],["[]=","OpenStruct","OpenStruct.html#method-i-5B-5D-3D","(name, value)",""],["[]=","Vector","Vector.html#method-i-5B-5D-3D","(i, v)",""],["__callee__","Kernel","Kernel.html#method-i-__callee__","()",""],["__method__","Kernel","Kernel.html#method-i-__method__","()",""],["__set_inspect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-__set_inspect","(method, args = nil, receiver = nil)",""],["_rand_range","Backports::Random::Implementation","Backports/Random/Implementation.html#method-i-_rand_range","(limit)",""],["advise","IO","IO.html#method-i-advise","(advice, offset=0, len=0)",""],["alias_method","Backports","Backports.html#method-c-alias_method","(mod, new_name, old_name)","<p>Safe alias_method that will only alias if the source exists and destination\ndoesn&#39;t\n"],["alias_method_chain","Backports","Backports.html#method-c-alias_method_chain","(mod, target, feature)","<p>Modified to avoid polluting Module if so desired (from Rails)\n"],["alias_method_chain","Module","Module.html#method-i-alias_method_chain","(target, feature, &block)","<p>Standard in rails… See official documentation\n"],["ascii_only?","String","String.html#method-i-ascii_only-3F","()",""],["assoc","Hash","Hash.html#method-i-assoc","(key)",""],["bind_with_additional_info","UnboundMethod","UnboundMethod.html#method-i-bind_with_additional_info","(to)",""],["binread","IO","IO.html#method-c-binread","(file, length = nil, offset = 0)",""],["binwrite","IO","IO.html#method-c-binwrite","(name, string, offset = nil, options = Backports::Undefined)",""],["bit_length","Bignum","Bignum.html#method-i-bit_length","()",""],["bit_length","Fixnum","Fixnum.html#method-i-bit_length","()",""],["bsearch","Array","Array.html#method-i-bsearch","()",""],["bsearch","Range","Range.html#method-i-bsearch","()",""],["bsearch_index","Array","Array.html#method-i-bsearch_index","()",""],["build","Matrix","Matrix.html#method-c-build","(row_size, column_size = row_size)","<p>Creates a matrix of size <code>row_size</code> x <code>column_size</code>.\nIt fills the values by calling the given block, passing …\n"],["build_eigenvectors","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-build_eigenvectors","()",""],["bytes","Backports::Random::Implementation","Backports/Random/Implementation.html#method-i-bytes","(nb)",""],["byteslice","String","String.html#method-i-byteslice","(start, len = Backports::Undefined)",""],["cache","Prime::TrialDivision","Prime/TrialDivision.html#method-i-cache","()","<p>Returns the cached prime numbers.\n"],["camelize","String","String.html#method-i-camelize","(first_letter = :upper)","<p>Standard in rails. See official documentation\n"],["canonical_ordering_one","UnicodeNormalize","UnicodeNormalize.html#method-c-canonical_ordering_one","(string)","<p>Canonical Ordering\n"],["capitalize","Symbol","Symbol.html#method-i-capitalize","()",""],["casecmp","Symbol","Symbol.html#method-i-casecmp","(with)",""],["cdiv","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-cdiv","(xr, xi, yr, yi)","<p>Complex scalar division.\n"],["chars","IO","IO.html#method-i-chars","()",""],["chr","String","String.html#method-i-chr","()",""],["chunk","Enumerable","Enumerable.html#method-i-chunk","(initial_state = nil, &original_block)",""],["chunk","Enumerator::Lazy","Enumerator/Lazy.html#method-i-chunk","(*)",""],["chunk_while","Enumerable","Enumerable.html#method-i-chunk_while","(&block)",""],["clamp","Comparable","Comparable.html#method-i-clamp","(min, max)",""],["clear","String","String.html#method-i-clear","()",""],["clone","Matrix","Matrix.html#method-i-clone","()","<p>Returns a clone of the matrix, so that the contents of each do not\nreference identical objects. There …\n"],["clone","Vector","Vector.html#method-i-clone","()","<p>Return a copy of the vector.\n"],["codepoints","String","String.html#method-i-codepoints","()",""],["coerce","Matrix","Matrix.html#method-i-coerce","(other)","<p>The coerce method provides support for Ruby type coercion. This coercion\nmechanism is used by Ruby to …\n"],["coerce","Vector","Vector.html#method-i-coerce","(other)","<p>The coerce method provides support for Ruby type coercion. This coercion\nmechanism is used by Ruby to …\n"],["coerce_to","Backports","Backports.html#method-c-coerce_to","(obj, cls, meth)","<p>Helper method to coerce a value into a specific class. Raises a TypeError\nif the coercion fails or the …\n"],["coerce_to_ary","Backports","Backports.html#method-c-coerce_to_ary","(obj)",""],["coerce_to_comparison","Backports","Backports.html#method-c-coerce_to_comparison","(a, b, cmp = (a <=> b))","<p>Checks for a failed comparison (in which case it throws an ArgumentError)\nAdditionally, it maps any negative …\n"],["coerce_to_hash","Backports","Backports.html#method-c-coerce_to_hash","(obj)",""],["coerce_to_int","Backports","Backports.html#method-c-coerce_to_int","(obj)",""],["coerce_to_option","Backports","Backports.html#method-c-coerce_to_option","(obj, option)",""],["coerce_to_options","Backports","Backports.html#method-c-coerce_to_options","(obj, *options)",""],["coerce_to_str","Backports","Backports.html#method-c-coerce_to_str","(obj)",""],["collect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect","()",""],["collect","Matrix","Matrix.html#method-i-collect","()","<p>Returns a matrix that is the result of iteration of the given block over\nall elements of the matrix. …\n"],["collect","Vector","Vector.html#method-i-collect","()","<p>Like Array#collect.\n"],["collect2","Vector","Vector.html#method-i-collect2","(v)","<p>Collects (as in Enumerable#collect) over the elements of this vector and\n<code>v</code> in conjunction.\n"],["collect_concat","Enumerable","Enumerable.html#method-i-collect_concat","()",""],["collect_concat","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect_concat","()",""],["column","Matrix","Matrix.html#method-i-column","(j)","<p>Returns column vector number <code>j</code> of the matrix as a Vector\n(starting at 0 like an array).  When a block …\n"],["column_vector","Matrix","Matrix.html#method-c-column_vector","(column)","<p>Creates a single-column matrix where the values of that column are as given\nin <code>column</code>.\n\n<pre>Matrix.column_vector([4,5,6]) ...</pre>\n"],["column_vectors","Matrix","Matrix.html#method-i-column_vectors","()","<p>Returns an array of the column vectors of the matrix.  See Vector.\n"],["columns","Matrix","Matrix.html#method-c-columns","(columns)","<p>Creates a matrix using <code>columns</code> as an array of column vectors.\n\n<pre>Matrix.columns([[25, 93], [-1, 66]])\n   ...</pre>\n"],["combination","Array","Array.html#method-i-combination","(num)",""],["combine_mode_and_option","Backports","Backports.html#method-c-combine_mode_and_option","(mode = nil, options = Backports::Undefined)","<p>Used internally to combine {IO|File} options hash into mode (String or\nInteger)\n"],["combine_mode_perm_and_option","Backports","Backports.html#method-c-combine_mode_perm_and_option","(mode = nil, perm = Backports::Undefined, options = Backports::Undefined)","<p>Used internally to combine {IO|File} options hash into mode (String or\nInteger) and perm\n"],["compact","Hash","Hash.html#method-i-compact","()",""],["compact!","Hash","Hash.html#method-i-compact-21","()",""],["component","Matrix","Matrix.html#method-i-component","(i, j)",""],["component","Vector","Vector.html#method-i-component","(i)",""],["compute_primes","Prime::EratosthenesSieve","Prime/EratosthenesSieve.html#method-i-compute_primes","()",""],["conj","Matrix","Matrix.html#method-i-conj","()",""],["conjugate","Matrix","Matrix.html#method-i-conjugate","()","<p>Returns the conjugate of the matrix.\n\n<pre>Matrix[[Complex(1,2), Complex(0,1), 0], [1, 2, 3]]\n  =&gt; 1+2i   i ...</pre>\n"],["constantize","String","String.html#method-i-constantize","()","<p>Standard in rails. See official documentation\n"],["constructor_without_key_value_pair_form","Hash","Hash.html#method-c-constructor_without_key_value_pair_form","(*args)",""],["convert_all_arguments_to_path","Backports","Backports.html#method-c-convert_all_arguments_to_path","(klass, selector, skip)","<p>Metaprogramming utility to convert all file arguments to paths\n"],["convert_first_argument_to_path","Backports","Backports.html#method-c-convert_first_argument_to_path","(klass, selector)","<p>Metaprogramming utility to convert the first file argument to path\n"],["convert_path","Backports","Backports.html#method-c-convert_path","(path)",""],["convert_seed","Backports::Random::MT19937","Backports/Random/MT19937.html#method-c-convert_seed","(seed)","<p>Convert an Integer seed of arbitrary size to either a single 32 bit\ninteger, or an Array of 32 bit integers …\n"],["count","Enumerable","Enumerable.html#method-i-count","(item = Backports::Undefined)",""],["covector","Vector","Vector.html#method-i-covector","()","<p>Creates a single-row matrix from this vector.\n"],["curry","Method","Method.html#method-i-curry","(argc = nil)",""],["curry","Proc","Proc.html#method-i-curry","(argc = nil)",""],["cycle","Array","Array.html#method-i-cycle","(n = nil)",""],["cycle","Enumerable","Enumerable.html#method-i-cycle","(n = nil)",""],["d","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-d","()",""],["dasherize","String","String.html#method-i-dasherize","()","<p>Standard in rails. See official documentation\n"],["default_proc=","Hash","Hash.html#method-i-default_proc-3D","(proc)",""],["default_proc_with_nil=","Hash","Hash.html#method-i-default_proc_with_nil-3D","(proc)",""],["define_singleton_method","Kernel","Kernel.html#method-i-define_singleton_method","(*args, &block)",""],["delete_if","Set","Set.html#method-i-delete_if","()",""],["demodulize","String","String.html#method-i-demodulize","()","<p>Standard in rails. See official documentation\n"],["det","Matrix","Matrix.html#method-i-det","()",""],["det","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-det","()","<p>Returns the determinant of <code>A</code>, calculated efficiently from the\nfactorization.\n"],["det_e","Matrix","Matrix.html#method-i-det_e","()",""],["determinant","Matrix","Matrix.html#method-i-determinant","()","<p>Returns the determinant of the matrix.\n<p>Beware that using Float values can yield erroneous results because …\n"],["determinant","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-determinant","()",""],["determinant_bareiss","Matrix","Matrix.html#method-i-determinant_bareiss","()","<p>Private. Use Matrix#determinant\n<p>Returns the determinant of the matrix, using Bareiss&#39; multistep\ninteger-preserving …\n"],["determinant_e","Matrix","Matrix.html#method-i-determinant_e","()","<p>deprecated; use Matrix#determinant\n"],["diagonal","Matrix","Matrix.html#method-c-diagonal","(*values)","<p>Creates a matrix where the diagonal elements are composed of\n<code>values</code>.\n\n<pre>Matrix.diagonal(9, 5, -3)\n  =&gt;  9 ...</pre>\n"],["diagonal?","Matrix","Matrix.html#method-i-diagonal-3F","()","<p>Returns <code>true</code> is this is a diagonal matrix. Raises an error if\nmatrix is not square.\n"],["diagonalize","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-diagonalize","()","<p>Symmetric tridiagonal QL algorithm.\n"],["dig","Array","Array.html#method-i-dig","(index, *rest)",""],["dig","Hash","Hash.html#method-i-dig","(key, *rest)",""],["dig","Struct","Struct.html#method-i-dig","(key, *rest)",""],["div","Fixnum","Fixnum.html#method-i-div","(n)",""],["downcase","Symbol","Symbol.html#method-i-downcase","()",""],["drop","Enumerable","Enumerable.html#method-i-drop","(n)",""],["drop","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop","(n)",""],["drop_while","Enumerable","Enumerable.html#method-i-drop_while","()","<p>Standard in Ruby 1.8.7+. See official documentation\n"],["drop_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop_while","()",""],["dup","FalseClass","FalseClass.html#method-i-dup","()",""],["dup","Fixnum","Fixnum.html#method-i-dup","()",""],["dup","Float","Float.html#method-i-dup","()",""],["dup","NilClass","NilClass.html#method-i-dup","()",""],["dup","TrueClass","TrueClass.html#method-i-dup","()",""],["each","Enumerator::GeneratorBP","Enumerator/GeneratorBP.html#method-i-each","(&block)",""],["each","Matrix","Matrix.html#method-i-each","(which = :all)","<p>Yields all elements of the matrix, starting with those of the first row, or\nreturns an Enumerator is …\n"],["each","Prime","Prime.html#method-i-each","(ubound = nil, generator = EratosthenesGenerator.new, &block)","<p>Iterates the given block over all prime numbers.\n<p>Parameters\n<p>ubound &mdash; Optional. An arbitrary positive number. …\n"],["each","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-each","()","<p>Iterates the given block for each prime number.\n"],["each","Vector","Vector.html#method-i-each","(&block)","<p>Iterate over the elements of this vector\n"],["each2","Vector","Vector.html#method-i-each2","(v)","<p>Iterate over the elements of this vector and <code>v</code> in conjunction.\n"],["each_char","ARGF","ARGF.html#method-c-each_char","()",""],["each_char","IO","IO.html#method-i-each_char","()",""],["each_char","String","String.html#method-i-each_char","()",""],["each_entry","Enumerable","Enumerable.html#method-i-each_entry","(*pass)",""],["each_pair","OpenStruct","OpenStruct.html#method-i-each_pair","()",""],["each_prime","Integer","Integer.html#method-c-each_prime","(ubound)","<p>Iterates the given block over all prime numbers.\n<p>See <code>Prime</code>#each for more details.\n"],["each_with_index","Matrix","Matrix.html#method-i-each_with_index","(which = :all)","<p>Same as #each, but the row index and column index in addition to the\nelement\n\n<pre>Matrix[ [1,2], [3,4] ].each_with_index ...</pre>\n"],["each_with_index_with_optional_args_and_block","Enumerable","Enumerable.html#method-i-each_with_index_with_optional_args_and_block","(*args)",""],["each_with_object","Enumerable","Enumerable.html#method-i-each_with_object","(memo)",""],["eigen","Matrix","Matrix.html#method-i-eigen","()",""],["eigensystem","Matrix","Matrix.html#method-i-eigensystem","()","<p>Returns the Eigensystem of the matrix; see\n<code>EigenvalueDecomposition</code>.\n\n<pre>m = Matrix[[1, 2], [3, 4]]\nv, d, v_inv ...</pre>\n"],["eigenvalue_matrix","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvalue_matrix","()","<p>Returns the block diagonal eigenvalue matrix <code>D</code>\n"],["eigenvalues","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvalues","()","<p>Returns the eigenvalues in an array\n"],["eigenvector_matrix","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix","()","<p>Returns the eigenvector matrix <code>V</code>\n"],["eigenvector_matrix_inv","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix_inv","()","<p>Returns the inverse of the eigenvector matrix <code>V</code>\n"],["eigenvectors","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvectors","()","<p>Returns an array of the eigenvectors\n"],["element","Matrix","Matrix.html#method-i-element","(i, j)",""],["element","Vector","Vector.html#method-i-element","(i)",""],["elements","Vector","Vector.html#method-c-elements","(array, copy = true)","<p>Creates a vector from an Array.  The optional second argument specifies\nwhether the array itself or a …\n"],["elements_to_f","Matrix","Matrix.html#method-i-elements_to_f","()",""],["elements_to_f","Vector","Vector.html#method-i-elements_to_f","()",""],["elements_to_i","Matrix","Matrix.html#method-i-elements_to_i","()",""],["elements_to_i","Vector","Vector.html#method-i-elements_to_i","()",""],["elements_to_r","Matrix","Matrix.html#method-i-elements_to_r","()",""],["elements_to_r","Vector","Vector.html#method-i-elements_to_r","()",""],["empty","Matrix","Matrix.html#method-c-empty","(row_size = 0, column_size = 0)","<p>Creates a empty matrix of <code>row_size</code> x <code>column_size</code>.\nAt least one of <code>row_size</code> or <code>column_size</code> must be\n0. …\n"],["empty?","Matrix","Matrix.html#method-i-empty-3F","()","<p>Returns <code>true</code> if this is an empty matrix, i.e. if the number of\nrows or the number of columns is 0.\n"],["empty?","Symbol","Symbol.html#method-i-empty-3F","()",""],["end_with?","String","String.html#method-i-end_with-3F","(*suffixes)",""],["entries_with_optional_arguments","Enumerable","Enumerable.html#method-i-entries_with_optional_arguments","(*args)",""],["enum_for","Enumerator::Lazy","Enumerator/Lazy.html#method-i-enum_for","(method = :each, *args)",""],["eql?","Hash","Hash.html#method-i-eql-3F","(other)",""],["eql?","Matrix","Matrix.html#method-i-eql-3F","(other)",""],["eql?","OpenStruct","OpenStruct.html#method-i-eql-3F","(other)",""],["eql?","Vector","Vector.html#method-i-eql-3F","(other)",""],["eval","Binding","Binding.html#method-i-eval","(expr, *arg)",""],["even?","Integer","Integer.html#method-i-even-3F","()",""],["expand_path_with_potential_to_path","File","File.html#method-c-expand_path_with_potential_to_path","(file, dir = nil)",""],["extend_relative","Backports::StdLib","Backports/StdLib.html#method-c-extend_relative","(relative_dir=\"stdlib\")",""],["extract_options!","Array","Array.html#method-i-extract_options-21","()","<p>See official documentation\n"],["fdiv","Fixnum","Fixnum.html#method-i-fdiv","(n)",""],["fetch_values","Hash","Hash.html#method-i-fetch_values","(*keys, &block)",""],["find_all","Enumerator::Lazy","Enumerator/Lazy.html#method-i-find_all","()",""],["find_index","Enumerable","Enumerable.html#method-i-find_index","(obj = Backports::Undefined)",""],["find_index","Matrix","Matrix.html#method-i-find_index","(*args)",""],["first","Enumerable","Enumerable.html#method-i-first","(n = Backports::Undefined)",""],["flat_map","Enumerable","Enumerable.html#method-i-flat_map","()",""],["flat_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-flat_map","()",""],["flatten_with_optional_argument","Array","Array.html#method-i-flatten_with_optional_argument","(level=-1)","<p>Recursively flatten any contained Arrays into an one-dimensional result.\nAdapted from rubinius&#39;\n"],["flatten_with_optional_argument!","Array","Array.html#method-i-flatten_with_optional_argument-21","(level=-1)","<p>Flattens self in place as #flatten. If no changes are made, returns nil,\notherwise self. Adapted from …\n"],["float_to_integer","Backports","Backports.html#method-c-float_to_integer","(float)",""],["from_prime_division","Integer","Integer.html#method-c-from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>See Prime#int_from_prime_division for more …\n"],["get_nth_prime","Prime::EratosthenesSieve","Prime/EratosthenesSieve.html#method-i-get_nth_prime","(n)",""],["grep","Enumerator::Lazy","Enumerator/Lazy.html#method-i-grep","(pattern)",""],["grep_v","Enumerable","Enumerable.html#method-i-grep_v","(pattern)",""],["group_by","Enumerable","Enumerable.html#method-i-group_by","()",""],["hangul_comp_one","UnicodeNormalize","UnicodeNormalize.html#method-c-hangul_comp_one","(string)",""],["hangul_decomp_one","UnicodeNormalize","UnicodeNormalize.html#method-c-hangul_decomp_one","(target)","<p>Hangul Algorithm\n"],["hash","Hash","Hash.html#method-i-hash","()",""],["hash","Matrix","Matrix.html#method-i-hash","()","<p>Returns a hash-code for the matrix.\n"],["hash","OpenStruct","OpenStruct.html#method-i-hash","()",""],["hash","Vector","Vector.html#method-i-hash","()","<p>Return a hash-code for the vector.\n"],["hermitian?","Matrix","Matrix.html#method-i-hermitian-3F","()","<p>Returns <code>true</code> is this is an hermitian matrix. Raises an error\nif matrix is not square.\n"],["hessenberg_to_real_schur","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-hessenberg_to_real_schur","()","<p>Nonsymmetric reduction from Hessenberg to real Schur form.\n"],["home","Dir","Dir.html#method-c-home","(user = \"\")",""],["identity","Matrix","Matrix.html#method-c-identity","(n)","<p>Creates an <code>n</code> by <code>n</code> identity matrix.\n\n<pre>Matrix.identity(2)\n  =&gt; 1 0\n     0 1</pre>\n"],["imag","Matrix","Matrix.html#method-i-imag","()",""],["imaginary","Matrix","Matrix.html#method-i-imaginary","()","<p>Returns the imaginary part of the matrix.\n\n<pre>Matrix[[Complex(1,2), Complex(0,1), 0], [1, 2, 3]]\n  =&gt; 1+2i ...</pre>\n"],["include?","Backports::StdLib::LoadedFeatures","Backports/StdLib/LoadedFeatures.html#method-i-include-3F","(feature)","<p>Check loaded features for one that matches “#{any of the load\npath}/#{feature}”\n"],["index","Matrix","Matrix.html#method-i-index","(*args)","<p>The index method is specialized to return the index as [row, column] It\nalso accepts an optional <code>selector</code> …\n"],["index_with_block","Array","Array.html#method-i-index_with_block","(*arg)",""],["inherited","BasicObject","BasicObject.html#method-c-inherited","(sub)","<p>Let&#39;s try to keep things clean, in case methods have been added to\nObject either directly or through …\n"],["initialize_with_optional_block","Enumerator","Enumerator.html#method-i-initialize_with_optional_block","(*arg, &block)",""],["inject_with_symbol","Enumerable","Enumerable.html#method-i-inject_with_symbol","(*args, &block)",""],["inner_product","Vector","Vector.html#method-i-inner_product","(v)","<p>Returns the inner product of this vector with the other.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Vector</span>[<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">7</span>].<span class=\"ruby-identifier\">inner_product</span> <span class=\"ruby-constant\">Vector</span>[<span class=\"ruby-value\">10</span>,<span class=\"ruby-value\">1</span>]  =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">47</span>\n</pre>\n"],["inspect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-inspect","()",""],["inspect","Matrix","Matrix.html#method-i-inspect","()","<p>Overrides Object#inspect\n"],["inspect","Random","Random.html#method-i-inspect","()",""],["inspect","Vector","Vector.html#method-i-inspect","()","<p>Overrides Object#inspect\n"],["instance_exec","Kernel","Kernel.html#method-i-instance_exec","(*arg, &block)",""],["instance_method_with_additional_info","Module","Module.html#method-i-instance_method_with_additional_info","(name)",""],["int_from_prime_division","Prime","Prime.html#method-i-int_from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>Parameters\n<p>pd &mdash; Array of pairs of integers. The …\n"],["integer_to_float","Backports","Backports.html#method-c-integer_to_float","(int)",""],["inv","Matrix","Matrix.html#method-i-inv","()",""],["inverse","Matrix","Matrix.html#method-i-inverse","()","<p>Returns the inverse of the matrix.\n\n<pre>Matrix[[-1, -1], [0, -1]].inverse\n  =&gt; -1  1\n      0 -1</pre>\n"],["is_array?","Backports","Backports.html#method-c-is_array-3F","(obj)",""],["itself","Kernel","Kernel.html#method-i-itself","()",""],["keep_if","Array","Array.html#method-i-keep_if","()",""],["keep_if","Hash","Hash.html#method-i-keep_if","()",""],["keep_if","Set","Set.html#method-i-keep_if","()",""],["l","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-l","()",""],["lambda?","Proc","Proc.html#method-i-lambda-3F","()","<p>Standard in Ruby 1.9. See official documentation\n"],["lambda_with_lambda_tracking","Kernel","Kernel.html#method-i-lambda_with_lambda_tracking","(&block)",""],["lazy","Enumerable","Enumerable.html#method-i-lazy","()",""],["lazy","Enumerator::Lazy","Enumerator/Lazy.html#method-i-lazy","()",""],["left","Backports::Random::Implementation","Backports/Random/Implementation.html#method-i-left","()",""],["left","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-left","()",""],["length","String","String.html#method-i-length","()",""],["length","Symbol","Symbol.html#method-i-length","()",""],["log2","Math","Math.html#method-c-log2","(numeric)",""],["log_with_optional_base","Math","Math.html#method-c-log_with_optional_base","(numeric, base = Backports::Undefined)","<p>Standard in Ruby 1.9. See official documentation\n"],["loop_with_stop_iteration","Kernel","Kernel.html#method-i-loop_with_stop_iteration","(&block)",""],["lower_triangular?","Matrix","Matrix.html#method-i-lower_triangular-3F","()","<p>Returns <code>true</code> is this is a lower triangular matrix.\n"],["lup","Matrix","Matrix.html#method-i-lup","()","<p>Returns the LUP decomposition of the matrix; see\n<code>LUPDecomposition</code>.\n\n<pre>a = Matrix[[1, 2], [3, 4]]\nl, u, p ...</pre>\n"],["lup_decomposition","Matrix","Matrix.html#method-i-lup_decomposition","()",""],["magnitude","Vector","Vector.html#method-i-magnitude","()","<p>Returns the modulus (Pythagorean distance) of the vector.\n\n<pre>Vector[5,8,2].r =&gt; 9.643650761</pre>\n"],["make_block_optional","Backports","Backports.html#method-c-make_block_optional","(mod, *methods)","<p>Metaprogramming utility to make block optional. Tests first if block is\nalready optional when given options …\n"],["map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-map","()",""],["map","Matrix","Matrix.html#method-i-map","()",""],["map","Vector","Vector.html#method-i-map","()",""],["map2","Vector","Vector.html#method-i-map2","(v)","<p>Like Vector#collect2, but returns a Vector instead of an Array.\n"],["map_via_packing","Backports","Backports.html#method-c-map_via_packing","(nb, pack, unpack)",""],["mark_as_loaded","Backports::StdLib::LoadedFeatures","Backports/StdLib/LoadedFeatures.html#method-c-mark_as_loaded","(feature)",""],["marshal_dump","Backports::Random::Implementation","Backports/Random/Implementation.html#method-i-marshal_dump","()",""],["marshal_dump","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-marshal_dump","()",""],["marshal_load","Backports::Random::Implementation","Backports/Random/Implementation.html#method-i-marshal_load","(ary)",""],["marshal_load","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-marshal_load","(ary)",""],["mask_32_bits","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-mask_32_bits","(n)",""],["match","Symbol","Symbol.html#method-i-match","(with)",""],["match?","Regexp","Regexp.html#method-i-match-3F","(*args)",""],["match?","String","String.html#method-i-match-3F","(*args)",""],["max_by","Enumerable","Enumerable.html#method-i-max_by","()",""],["method_with_additional_info","Kernel","Kernel.html#method-i-method_with_additional_info","(name)",""],["min_by","Enumerable","Enumerable.html#method-i-min_by","()",""],["minmax","Enumerable","Enumerable.html#method-i-minmax","()",""],["minmax_by","Enumerable","Enumerable.html#method-i-minmax_by","()","<p>Standard in Ruby 1.8.7+. See official documentation\n"],["minor","Matrix","Matrix.html#method-i-minor","(*param)","<p>Returns a section of the matrix.  The parameters are either:\n<p>start_row, nrows, start_col, ncols; OR\n<p>row_range …\n"],["mktmpdir","Dir","Dir.html#method-c-mktmpdir","(prefix_suffix=nil, tmpdir=nil)",""],["module_exec","Module","Module.html#method-i-module_exec","(*arg, &block)",""],["negative?","Numeric","Numeric.html#method-i-negative-3F","()",""],["new","Backports::Random::Implementation","Backports/Random/Implementation.html#method-c-new","(seed = 0)",""],["new","Backports::Random::MT19937","Backports/Random/MT19937.html#method-c-new","(seed)","<p>See seed=\n"],["new","Enumerator::GeneratorBP","Enumerator/GeneratorBP.html#method-c-new","(&block)",""],["new","Enumerator::Lazy","Enumerator/Lazy.html#method-c-new","(obj)",""],["new","Enumerator::Yielder","Enumerator/Yielder.html#method-c-new","(&block)",""],["new","Matrix","Matrix.html#method-c-new","(rows, column_size = rows[0].size)","<p>Matrix.new is private; use Matrix.rows, columns, [], etc… to create.\n"],["new","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-c-new","(a)","<p>Constructs the eigenvalue decomposition for a square matrix <code>A</code>\n"],["new","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-c-new","(a)",""],["new","Prime::EratosthenesGenerator","Prime/EratosthenesGenerator.html#method-c-new","()",""],["new","Prime::EratosthenesSieve","Prime/EratosthenesSieve.html#method-c-new","()",""],["new","Prime::Generator23","Prime/Generator23.html#method-c-new","()",""],["new","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-c-new","(ubound = nil)",""],["new","Prime::TrialDivisionGenerator","Prime/TrialDivisionGenerator.html#method-c-new","()",""],["new","Vector","Vector.html#method-c-new","(array)","<p>Vector.new is private; use Vector[] or Vector.elements to create.\n"],["new_seed","Random","Random.html#method-c-new_seed","()",""],["next","Enumerable::Enumerator","Enumerable/Enumerator.html#method-i-next","()",""],["next","Prime::EratosthenesGenerator","Prime/EratosthenesGenerator.html#method-i-next","()",""],["next","Prime::Generator23","Prime/Generator23.html#method-i-next","()",""],["next","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-next","()","<p>alias of <code>succ</code>.\n"],["next","Prime::TrialDivisionGenerator","Prime/TrialDivisionGenerator.html#method-i-next","()",""],["next","Symbol","Symbol.html#method-i-next","()",""],["next_float","Float","Float.html#method-i-next_float","()",""],["next_state","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-next_state","()","<p>Generates a completely new state out of the previous one.\n"],["nfc_one","UnicodeNormalize","UnicodeNormalize.html#method-c-nfc_one","(string)",""],["nfd_one","UnicodeNormalize","UnicodeNormalize.html#method-c-nfd_one","(string)","<p>Normalization Forms for Patterns (not whole Strings)\n"],["none?","Enumerable","Enumerable.html#method-i-none-3F","(&block)",""],["norm","Vector","Vector.html#method-i-norm","()",""],["normal?","Matrix","Matrix.html#method-i-normal-3F","()","<p>Returns <code>true</code> is this is a normal matrix. Raises an error if\nmatrix is not square.\n"],["normalize","UnicodeNormalize","UnicodeNormalize.html#method-c-normalize","(string, form = :nfc)",""],["normalize","Vector","Vector.html#method-i-normalize","()","<p>Returns a new vector with the same direction but with norm 1.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">v</span> = <span class=\"ruby-constant\">Vector</span>[<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">8</span>,<span class=\"ruby-value\">2</span>].<span class=\"ruby-identifier\">normalize</span>\n<span class=\"ruby-comment\"># =&gt; Vector[0.5184758473652127, ...</span>\n</pre>\n"],["normalized?","UnicodeNormalize","UnicodeNormalize.html#method-c-normalized-3F","(string, form = :nfc)",""],["odd?","Integer","Integer.html#method-i-odd-3F","()",""],["one?","Enumerable","Enumerable.html#method-i-one-3F","()",""],["open_with_options_hash","IO","IO.html#method-c-open_with_options_hash","(*args)",""],["open_with_options_hash","Object","Object.html#method-i-open_with_options_hash","(file, mode = nil, perm_or_options = Backports::Undefined)",""],["ord","Integer","Integer.html#method-i-ord","()",""],["ord","String","String.html#method-i-ord","()",""],["orthogonal?","Matrix","Matrix.html#method-i-orthogonal-3F","()","<p>Returns <code>true</code> is this is an orthogonal matrix Raises an error\nif matrix is not square.\n"],["p","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-p","()","<p>Returns the permutation matrix <code>P</code>\n"],["partition_with_new_meaning","String","String.html#method-i-partition_with_new_meaning","(pattern = Backports::Undefined)",""],["permutation","Array","Array.html#method-i-permutation","(num = Backports::Undefined)",""],["permutation?","Matrix","Matrix.html#method-i-permutation-3F","()","<p>Returns <code>true</code> is this is a permutation matrix Raises an error\nif matrix is not square.\n"],["pop_with_optional_argument","Array","Array.html#method-i-pop_with_optional_argument","(n = Backports::Undefined)",""],["positive?","Numeric","Numeric.html#method-i-positive-3F","()",""],["pred","Integer","Integer.html#method-i-pred","()",""],["prepend","String","String.html#method-i-prepend","(other_str)",""],["prev_float","Float","Float.html#method-i-prev_float","()",""],["prime?","Integer","Integer.html#method-i-prime-3F","()","<p>Returns true if <code>self</code> is a prime number, else returns false.\n"],["prime?","Prime","Prime.html#method-i-prime-3F","(value, generator = Prime::Generator23.new)","<p>Returns true if <code>value</code> is a prime number, else returns false.\n<p>Parameters\n<p>value &mdash; an arbitrary integer to be …\n"],["prime_division","Integer","Integer.html#method-i-prime_division","(generator = Prime::Generator23.new)","<p>Returns the factorization of <code>self</code>.\n<p>See Prime#prime_division for more details.\n"],["prime_division","Prime","Prime.html#method-i-prime_division","(value, generator = Prime::Generator23.new)","<p>Returns the factorization of <code>value</code>.\n<p>Parameters\n<p>value &mdash; An arbitrary integer.\n"],["primes","Prime::TrialDivision","Prime/TrialDivision.html#method-i-primes","()",""],["primes_so_far","Prime::TrialDivision","Prime/TrialDivision.html#method-i-primes_so_far","()",""],["proc_with_lambda_tracking","Kernel","Kernel.html#method-i-proc_with_lambda_tracking","(&block)",""],["product","Array","Array.html#method-i-product","(*arg)",""],["product_with_block","Array","Array.html#method-i-product_with_block","(*arg, &block)",""],["public_method","Kernel","Kernel.html#method-i-public_method","(meth)",""],["public_send","Kernel","Kernel.html#method-i-public_send","(method, *args, &block)",""],["r","Vector","Vector.html#method-i-r","()",""],["rand","Backports::Random::Implementation","Backports/Random/Implementation.html#method-i-rand","(limit = Backports::Undefined)",""],["random_32_bits","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-random_32_bits","()","<p>Returns a random Integer from the range 0 … (1 &lt;&lt; 32)\n"],["random_bytes","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-random_bytes","(nb)",""],["random_float","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-random_float","()","<p>generates a random number on [0,1) with 53-bit resolution\n"],["random_integer","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-random_integer","(upto)","<p>Returns an integer within 0…upto\n"],["rank","Matrix","Matrix.html#method-i-rank","()","<p>Returns the rank of the matrix. Beware that using Float values can yield\nerroneous results because of …\n"],["rank_e","Matrix","Matrix.html#method-i-rank_e","()","<p>deprecated; use Matrix#rank\n"],["rassoc","Hash","Hash.html#method-i-rassoc","(value)",""],["real","Matrix","Matrix.html#method-i-real","()","<p>Returns the real part of the matrix.\n\n<pre>Matrix[[Complex(1,2), Complex(0,1), 0], [1, 2, 3]]\n  =&gt; 1+2i  i  ...</pre>\n"],["real?","Matrix","Matrix.html#method-i-real-3F","()","<p>Returns <code>true</code> if all entries of the matrix are real.\n"],["rect","Matrix","Matrix.html#method-i-rect","()","<p>Returns an array containing matrices corresponding to the real and\nimaginary parts of the matrix\n<p>m.rect …\n"],["rectangular","Matrix","Matrix.html#method-i-rectangular","()",""],["recursively_flatten_finite","Array","Array.html#method-i-recursively_flatten_finite","(array, out, level)","<p>Helper to recurse through flattening Adapted from rubinius&#39;; recursion\nguards are not needed because …\n"],["reduce_to_hessenberg","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-reduce_to_hessenberg","()","<p>Nonsymmetric reduction to Hessenberg form.\n"],["regular?","Matrix","Matrix.html#method-i-regular-3F","()","<p>Returns <code>true</code> if this is a regular (i.e. non-singular) matrix.\n"],["reject","Enumerator::Lazy","Enumerator/Lazy.html#method-i-reject","()",""],["repeated_combination","Array","Array.html#method-i-repeated_combination","(num)","<p>Note: Combinations are not yielded in the same order as MRI. This is not a\nbug; the spec states that …\n"],["repeated_permutation","Array","Array.html#method-i-repeated_permutation","(num)","<p>Note: Permutations are not yielded in the same order as MRI. This is not a\nbug; the spec states that …\n"],["require_relative","Kernel","Kernel.html#method-i-require_relative","(relative_feature)",""],["require_relative_dir","Backports","Backports.html#method-c-require_relative_dir","()",""],["require_with_backports","Kernel","Kernel.html#method-i-require_with_backports","(lib)",""],["reverse_each","Enumerable","Enumerable.html#method-i-reverse_each","()",""],["reverse_merge","Hash","Hash.html#method-i-reverse_merge","(other_hash)","<p>Standard in rails. See official documentation\n"],["reverse_merge!","Hash","Hash.html#method-i-reverse_merge-21","(other_hash)","<p>Standard in rails. See official documentation\n"],["rewind","Enumerable::Enumerator","Enumerable/Enumerator.html#method-i-rewind","()",""],["rewind","Prime::EratosthenesGenerator","Prime/EratosthenesGenerator.html#method-i-rewind","()",""],["rewind","Prime::Generator23","Prime/Generator23.html#method-i-rewind","()",""],["rewind","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-rewind","()","<p>Rewinds the internal position for enumeration.\n<p>See <code>Enumerator</code>#rewind.\n"],["rewind","Prime::TrialDivisionGenerator","Prime/TrialDivisionGenerator.html#method-i-rewind","()",""],["rindex_with_block","Array","Array.html#method-i-rindex_with_block","(*arg)",""],["rotate","Array","Array.html#method-i-rotate","(n=1)",""],["rotate!","Array","Array.html#method-i-rotate-21","(n=1)",""],["round","Matrix","Matrix.html#method-i-round","(ndigits=0)","<p>Returns a matrix with entries rounded to the given precision (see\nFloat#round)\n"],["round_with_digits","Float","Float.html#method-i-round_with_digits","(ndigits=0)",""],["round_with_digits","Integer","Integer.html#method-i-round_with_digits","(ndigits=0)",""],["round_with_digits","Numeric","Numeric.html#method-i-round_with_digits","(ndigits=0)",""],["row","Matrix","Matrix.html#method-i-row","(i)","<p>Returns row vector number <code>i</code> of the matrix as a Vector\n(starting at 0 like an array).  When a block is …\n"],["row_size","Matrix","Matrix.html#method-i-row_size","()","<p>Returns the number of rows.\n"],["row_vector","Matrix","Matrix.html#method-c-row_vector","(row)","<p>Creates a single-row matrix where the values of that row are as given in\n<code>row</code>.\n\n<pre>Matrix.row_vector([4,5,6]) ...</pre>\n"],["row_vectors","Matrix","Matrix.html#method-i-row_vectors","()","<p>Returns an array of the row vectors of the matrix.  See Vector.\n"],["rows","Matrix","Matrix.html#method-c-rows","(rows, copy = true)","<p>Creates a matrix where <code>rows</code> is an array of arrays, each of\nwhich is a row of the matrix.  If the optional …\n"],["rpartition","String","String.html#method-i-rpartition","(pattern)",""],["sample","Array","Array.html#method-i-sample","(n = Backports::Undefined, options = Backports::Undefined)",""],["scalar","Matrix","Matrix.html#method-c-scalar","(n, value)","<p>Creates an <code>n</code> by <code>n</code> diagonal matrix where each\ndiagonal element is <code>value</code>.\n\n<pre>Matrix.scalar(2, 5)\n  =&gt; 5 0\n ...</pre>\n"],["seed=","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-seed-3D","(seed)","<p>Seed must be either an Integer (only the first 32 bits will be used) or an\nArray of Integers (of which …\n"],["select","Enumerator::Lazy","Enumerator/Lazy.html#method-i-select","()",""],["select!","Array","Array.html#method-i-select-21","()",""],["select!","Hash","Hash.html#method-i-select-21","()",""],["select_with_hash_return","Hash","Hash.html#method-i-select_with_hash_return","()",""],["set_component","Matrix","Matrix.html#method-i-set_component","(i, j, v)",""],["set_component","Vector","Vector.html#method-i-set_component","(i, v)",""],["set_element","Matrix","Matrix.html#method-i-set_element","(i, j, v)",""],["set_element","Vector","Vector.html#method-i-set_element","(i, v)",""],["shift_with_optional_argument","Array","Array.html#method-i-shift_with_optional_argument","(n = Backports::Undefined)",""],["shuffle","Array","Array.html#method-i-shuffle","()",""],["shuffle!","Array","Array.html#method-i-shuffle-21","()","<p>Standard in Ruby 1.8.7+. See official documentation\n"],["singleton_class","Kernel","Kernel.html#method-i-singleton_class","()",""],["singular?","Matrix","Matrix.html#method-i-singular-3F","()","<p>Returns <code>true</code> is this is a singular matrix.\n"],["singular?","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-singular-3F","()","<p>Returns <code>true</code> if <code>U</code>, and hence <code>A</code>, is\nsingular.\n"],["size","File","File.html#method-i-size","()",""],["size","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-size","()",""],["size","Range","Range.html#method-i-size","()",""],["size","Symbol","Symbol.html#method-i-size","()",""],["size","Vector","Vector.html#method-i-size","()","<p>Returns the number of elements in the vector.\n"],["slice_after","Enumerable","Enumerable.html#method-i-slice_after","(pattern = Backports::Undefined, &block)",""],["slice_before","Enumerable","Enumerable.html#method-i-slice_before","(arg = Backports::Undefined, &block)",""],["slice_when","Enumerable","Enumerable.html#method-i-slice_when","(&block)",""],["solve","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-solve","(b)","<p>Returns <code>m</code> so that <code>A*m = b</code>, or equivalently so\nthat <code>L*U*m = P*b</code> <code>b</code> can be a Matrix or a Vector\n"],["sort_by!","Array","Array.html#method-i-sort_by-21","()",""],["square?","Matrix","Matrix.html#method-i-square-3F","()","<p>Returns <code>true</code> is this is a square matrix.\n"],["srand","Backports::Random::Implementation","Backports/Random/Implementation.html#method-i-srand","(new_seed = 0)",""],["start_with?","String","String.html#method-i-start_with-3F","(*prefixes)",""],["state","Backports::Random::Implementation","Backports/Random/Implementation.html#method-i-state","()",""],["state_as_bignum","Backports::Random::MT19937","Backports/Random/MT19937.html#method-i-state_as_bignum","()",""],["stress","GC","GC.html#method-c-stress","()",""],["stress=","GC","GC.html#method-c-stress-3D","(flag)",""],["stringify_keys","Hash","Hash.html#method-i-stringify_keys","()","<p>Standard in rails. See official documentation\n"],["stringify_keys!","Hash","Hash.html#method-i-stringify_keys-21","()","<p>Standard in rails. See official documentation\n"],["succ","Prime::EratosthenesGenerator","Prime/EratosthenesGenerator.html#method-i-succ","()",""],["succ","Prime::Generator23","Prime/Generator23.html#method-i-succ","()",""],["succ","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-succ","()","<p>returns the next pseudo-prime number, and move the internal position\nforward.\n<p><code>PseudoPrimeGenerator</code>#succ …\n"],["succ","Prime::TrialDivisionGenerator","Prime/TrialDivisionGenerator.html#method-i-succ","()",""],["succ","Symbol","Symbol.html#method-i-succ","()",""],["sum","Enumerable","Enumerable.html#method-i-sum","(accumulator = 0, &block)",""],["super_method","Method","Method.html#method-i-super_method","()",""],["suppress_verbose_warnings","Backports","Backports.html#method-c-suppress_verbose_warnings","()",""],["swapcase","Symbol","Symbol.html#method-i-swapcase","()",""],["symbolize_keys","Hash","Hash.html#method-i-symbolize_keys","()","<p>Standard in rails. See official documentation\n"],["symbolize_keys!","Hash","Hash.html#method-i-symbolize_keys-21","()","<p>Standard in rails. See official documentation\n"],["symmetric?","Matrix","Matrix.html#method-i-symmetric-3F","()","<p>Returns <code>true</code> is this is a symmetric matrix. Raises an error if\nmatrix is not square.\n"],["t","Matrix","Matrix.html#method-i-t","()",""],["take","Enumerable","Enumerable.html#method-i-take","(n)",""],["take","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take","(n)",""],["take_while","Enumerable","Enumerable.html#method-i-take_while","()","<p>Standard in Ruby 1.8.7+. See official documentation\n"],["take_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take_while","()",""],["tap","Kernel","Kernel.html#method-i-tap","()",""],["to_a","Matrix","Matrix.html#method-i-to_a","()","<p>Returns an array of arrays that describe the rows of the matrix.\n"],["to_a","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-to_a","()",""],["to_a","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-to_a","()",""],["to_a","Vector","Vector.html#method-i-to_a","()","<p>Returns the elements of the vector in an array.\n"],["to_a_with_optional_arguments","Enumerable","Enumerable.html#method-i-to_a_with_optional_arguments","(*args)",""],["to_ary","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-to_ary","()","<p>Returns [eigenvector_matrix, eigenvalue_matrix, eigenvector_matrix_inv]\n"],["to_ary","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-to_ary","()","<p>Returns <code>L</code>, <code>U</code>, <code>P</code> in an array\n"],["to_enum","Enumerator::Lazy","Enumerator/Lazy.html#method-i-to_enum","(method = :each, *args)",""],["to_h","Enumerable","Enumerable.html#method-i-to_h","(*args)",""],["to_h","Hash","Hash.html#method-i-to_h","()",""],["to_h","NilClass","NilClass.html#method-i-to_h","()",""],["to_h","OpenStruct","OpenStruct.html#method-i-to_h","()",""],["to_h","Struct","Struct.html#method-i-to_h","()",""],["to_proc","Hash","Hash.html#method-i-to_proc","()",""],["to_proc","Symbol","Symbol.html#method-i-to_proc","()","<p>Standard in ruby 1.8.7+. See official documentation\n"],["to_proc_with_lambda_tracking","Method","Method.html#method-i-to_proc_with_lambda_tracking","()",""],["to_r","Complex","Complex.html#method-i-to_r","()",""],["to_s","Matrix","Matrix.html#method-i-to_s","()","<p>Overrides Object#to_s\n"],["to_s","Vector","Vector.html#method-i-to_s","()","<p>Overrides Object#to_s\n"],["tr","Matrix","Matrix.html#method-i-tr","()",""],["trace","Matrix","Matrix.html#method-i-trace","()","<p>Returns the trace (sum of diagonal elements) of the matrix.\n\n<pre>Matrix[[7,6], [3,9]].trace\n  =&gt; 16</pre>\n"],["transform_values","Hash","Hash.html#method-i-transform_values","()",""],["transform_values!","Hash","Hash.html#method-i-transform_values-21","()",""],["transpose","Matrix","Matrix.html#method-i-transpose","()","<p>Returns the transpose of the matrix.\n\n<pre>Matrix[[1,2], [3,4], [5,6]]\n  =&gt; 1 2\n     3 4\n     5 6\nMatrix[[1,2], ...</pre>\n"],["tridiagonalize","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-tridiagonalize","()","<p>Symmetric Householder reduction to tridiagonal form.\n"],["try","Object","Object.html#method-i-try","(method_id, *args, &block)","<p>Standard in rails. See official documentation\n"],["try_convert","Array","Array.html#method-c-try_convert","(obj)",""],["try_convert","Backports","Backports.html#method-c-try_convert","(obj, cls, meth)",""],["try_convert","Hash","Hash.html#method-c-try_convert","(x)",""],["try_convert","IO","IO.html#method-c-try_convert","(obj)",""],["try_convert","Regexp","Regexp.html#method-c-try_convert","(obj)",""],["try_convert","String","String.html#method-c-try_convert","(x)",""],["u","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-u","()","<p>Returns the upper triangular factor <code>U</code>\n"],["unbind_with_additional_info","Method","Method.html#method-i-unbind_with_additional_info","()",""],["underscore","String","String.html#method-i-underscore","()","<p>Standard in rails. See official documentation\n"],["unicode_normalize","String","String.html#method-i-unicode_normalize","(form = :nfc)",""],["unicode_normalize!","String","String.html#method-i-unicode_normalize-21","(form = :nfc)",""],["unicode_normalized?","String","String.html#method-i-unicode_normalized-3F","(form = :nfc)",""],["union_with_array_argument","Regexp","Regexp.html#method-c-union_with_array_argument","(*arg)",""],["uniq","Enumerable","Enumerable.html#method-i-uniq","(&block)",""],["uniq_with_block","Array","Array.html#method-i-uniq_with_block","()",""],["uniq_with_block!","Array","Array.html#method-i-uniq_with_block-21","()",""],["unit","Matrix","Matrix.html#method-c-unit","(n)",""],["unitary?","Matrix","Matrix.html#method-i-unitary-3F","()","<p>Returns <code>true</code> is this is a unitary matrix Raises an error if\nmatrix is not square.\n"],["upcase","Symbol","Symbol.html#method-i-upcase","()",""],["upper_bound","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-upper_bound","()",""],["upper_bound=","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-upper_bound-3D","(ubound)",""],["upper_triangular?","Matrix","Matrix.html#method-i-upper_triangular-3F","()","<p>Returns <code>true</code> is this is an upper triangular matrix.\n"],["upto_with_exclusive","String","String.html#method-i-upto_with_exclusive","(to, excl=false)",""],["v","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-v","()",""],["v_inv","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-v_inv","()",""],["with_index","Enumerable::Enumerator","Enumerable/Enumerator.html#method-i-with_index","(offset = 0)",""],["with_index","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-with_index","(offset = 0)","<p>see <code>Enumerator</code>#with_index.\n"],["with_object","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-with_object","(obj)","<p>see <code>Enumerator</code>#with_object.\n"],["write","Backports","Backports.html#method-c-write","(binary, filename, string, offset, options)",""],["write","IO","IO.html#method-c-write","(name, string, offset = nil, options = Backports::Undefined)",""],["yield","Enumerator::Yielder","Enumerator/Yielder.html#method-i-yield","(*arg)",""],["zero","Matrix","Matrix.html#method-c-zero","(row_size, column_size = row_size)","<p>Creates a zero matrix.\n\n<pre>Matrix.zero(2)\n  =&gt; 0 0\n     0 0</pre>\n"],["zero?","Matrix","Matrix.html#method-i-zero-3F","()","<p>Returns <code>true</code> is this is a matrix with only zero elements\n"],["zip","Enumerator::Lazy","Enumerator/Lazy.html#method-i-zip","(*args)",""]]}}